' Toolbar parameters for integrator experiment
'
' This file was made by combining...
' - The code from Parameters_Universal.s2s, which is in velocity mode
' - The code from Parameters_Universal_D243.s2s, which uses the TIB talkers
'
' I also cleaned up a lot of the formatting and removed parts of the GUI that are
' unrelated to the integrator experiment.
'
' I was able to get the drift fix working for sines. I haven't tested it on steps.
'
' Kellen Vu (kellen.vo.vu@gmail.com), Dec 3, 2022

'--------------------------------------------------------------------------------
' SINE PARAMETERS
'--------------------------------------------------------------------------------

var sinHzChair := 1;
var sinPhChair := -90;
var actualChairPh;
var sinHzDrum := 1;
var sinPhDrum := 90;
var actualDrumPh;
var sineOn% := 0;
var sinAmpChair := 10;
var sinAmpDrum := 10;
var halfPhaseDelay := (sinHzDrum * 1000) / 2;
var prevTime := 0;

'--------------------------------------------------------------------------------
' STEP PARAMETERS
'--------------------------------------------------------------------------------

var stepPeriod := 1000;
var stepLength := 250;
var stepStim := 0;
var stepAmpChair := 10;
var stepAmpDrum := 10;
var stepAmpDrumN := 10;
var sRest2;
var sStart;
var sLength;
var sLength1;
var sRest1;
var sAmpChair;
var sAmpDrum;
var sAmpChairN;
var sAmpDrumN;
var stepLen1 := 0;
var stepLen2 := 0;
var stepLen3 := 0;
' For video alignment pulse - duration
var pulseDurationV := 33;
' For video alignment pulse - time between pulses
var pulseWaitV := 1000 - pulseDurationV - 5;
var pulsePeriod := 1000;
var checkConfig := 1;
var QueTime := 0;

' Dev params for drift fix
var W := 1;
var X := 1.02;
var Y := 0.9;
var Z := 1;

'--------------------------------------------------------------------------------
' PULSE PARAMETERS
'--------------------------------------------------------------------------------

var pWait := 0;
var pNumber := 1;
var pDuration;
var pInterval;
var pStart;
var pulseDuration := 500;
var pulseInterval := 0;
var pWait2 := 0;
var pulsePhase := 0 ;
var stepLight := 0;
var lightDur := 500;
var lightStart := 0;
var everyNCycles := 1;
var flashOn% := 1;

'--------------------------------------------------------------------------------
' EXPERIMENT PARAMETERS
'--------------------------------------------------------------------------------

var nBlocks% := 1; ' Number of train-test blocks in expmt
var preTestLength := 180; ' Seconds to pretest
var trainLength := 1200; ' Seconds to train (Ella: 900)
var testLength := 180; ' Seconds to test (Ella: 300)
var isRunningExpmt% := 0;
var blocksCompleted% := 0;
var nextPhase% := 1;
var goalTime := 1000000000; ' Timestamp to move to next phase

'--------------------------------------------------------------------------------
' TRACKING PARAMETERS
' Values for deltaComm and gain should be adjusted
' according to preliminary values gathered from pilot experiment
' Currently saccadeThreshold is not used - this could be a feature to add where
' you're only responding if the eye movement is above a certain degree magnitude
'
' Parameters to change in the drop-down menu: bestChannel and eyeScaleFactor,
' both determined by a calibration done BEFORE the experiment
' leakOrInstability - tells the program if you're training for leak or instability
'--------------------------------------------------------------------------------

' Null eye pos
var nullEyePos := 0;
var prevNullTime := 0;
var deltaNull := 5; ' Find null eye every deltaNull seconds

' Tracking
var isTracking% := 0; ' True when drum is tracking eye
var leakInstabilityScale := 1; ' 1 for leak, -1 for instability
var leakInstabilityGUI := 0; ' 0 for leak, 1 for instability
var eyePositiveIsClockwise% := 0;
var gain := 0.5;
var gainIncrement := 0.5; ' How much you want to increase the gain after each block
var bestChannel := 1; ' Do pre-calibration to determine which eye channel to track
var bestChannelGUI := 0; ' 0 for channel 1; 1 for channel 2 (because 0-indexed)
var eyeScaleFactor := 1; ' Determined from calibration, changed in settings before running expmt
var maxTrackVel := 15; ' Maximum absolute drum velocity command, in deg/s

' Return drum
var isReturning% := 0; ' True when drum is returning to pos 0
var returnEpsilon := 0.05; ' Drum has returned when abs(pos) < returnEpsilon

' Drum vel command
var prevCommTime := 0;
var deltaComm := 0.1; ' Send drum vel command every deltaComm s
var drumVelCommand := 0; ' deg/s
var maxDrumVel := 10;

' Chair vel command
var chairVelCommand := 0; ' deg/s
var maxChairVel := 10;

'--------------------------------------------------------------------------------
' MISC PARAMETERS
'--------------------------------------------------------------------------------

var SampleWindow%;
var comment$;
var vidOn := 0;
var stepOn% := 0;
var fullPulse := 0;
' Voltage Range: check in Edit -> Edit Parameters
var MaxVoltage := 10;
var centerLineChair := 0;
var centerLineDrum := 0;
var testStim := 0;
var rotationVelocity := 0.02;
var radianConversion := 57.295779513; ' divide a value in degrees by this number to convert to radians - from Spike2 manual
var measuredZeroChair := 0;
var measuredZeroDrum := 0;

var numFreqs% := 20;
var currFreqIdx% := 0;

'--------------------------------------------------------------------------------
' TOOLBAR PARAMETERS
'--------------------------------------------------------------------------------

const NewFilePos        := 2;
const InitPos           := NewFilePos+1;
const CommentPos        := InitPos+1;
const LightPos          := CommentPos+1;
const LaserPos          := LightPos+1;
const SinePos           := LaserPos+1;
const SineConfigPos     := SinePos+1;
const PulsePos          := SineConfigPos+1;
const PulseConfigPos    := PulsePos+1;
const VidPos            := PulseConfigPos+1;
const StepPos           := VidPos+1;
const StepConfigPos     := StepPos+1;
const TrackPos          := StepConfigPos+1; ' Integrator experiments
const TrackConfigPos    := TrackPos+1; ' Integrator experiments
const FindNullEyePos    := TrackConfigPos+1; ' Integrator experiments
const ExpmtPos          := FindNullEyePos+1;
const ExpmtConfigPos    := ExpmtPos+1;
const devPos            := ExpmtConfigPos+1;

const HTVELChCom% := 1;
const HHVELChCom% := 2;
const htposCh% := 3;
const hhposCh% := 4;
const heposCh1% := 5;
const heposCh2% := 6;
var hhvelCh%;
var htvelCh%;

'--------------------------------------------------------------------------------
' SINE FUNCTIONS
'--------------------------------------------------------------------------------

func ToolbarSineStart%()
    prevTime := MaxTime();
    measuredZeroChair := ChanMeasure(hhposCh%, 2, prevTime-2, prevTime-0.5);
    measuredZeroDrum := ChanMeasure(htposCh%, 2, prevTime-2, prevTime-0.5);
    SampleKey("S");
    sineOn% := 1;
    Yield();
    ToolbarSet(SinePos, "Sine Off", ToolbarSineStop%);
    return 1;
end

func ToolbarSineStop%()
    SampleKey("s");
    sineOn% := 0;
    ToolbarSet(SinePos, "Sine On", ToolbarSineStart%);
    return 1;
end

func ToolbarSineConfig%()
    DlgCreate("Sine settings"); ' Start new dialog
    DlgReal(1, "Chair Freq (Hz)", 0, 50);
    DlgReal(2, "Chair Velocity Amplitude (deg/s)", 0, 100); ' set to 0 if not using Chair
    DlgReal(3, "Chair Phase (deg)", -180, 180);
    DlgReal(4, "Drum Freq (Hz)", 0, 50);
    DlgReal(5, "Drum Velocity Amplitude (deg/s)", 0, 100); ' set to 0 if not using Drum
    DlgReal(6, "Drum Phase (deg)", -180, 180);
    DlgShow(sinHzChair, sinAmpChair, sinPhChair, sinHzDrum, sinAmpDrum,  sinPhDrum);

    halfPhaseDelay := (sinHzDrum * 1000) / 2;

    SetPulseSettings%();

    SetSequencerValues();

    return 1;
end

'--------------------------------------------------------------------------------
' LIGHT FUNCTIONS
'--------------------------------------------------------------------------------

func ToolbarLightOn%()
    SampleKey("L");
    ' Toolbarset(LightPos, "Light Off", ToolbarLightOff%);
    return 1;
end

func ToolbarLightOff%()
    SampleKey("l");
    ' Toolbarset(LightPos, "Light On", ToolbarLightOn%);
    return 1;
end

proc runFlash()
    if flashon% = 1 then
        ToolbarLightOn%();
    endif
    Yield(0.2);
    ToolbarLightOff%();
end

'--------------------------------------------------------------------------------
' TURN BOTH LASERS ON/OFF
'--------------------------------------------------------------------------------

func ToolbarLasersOn%()
    SampleKey("Z");
    Toolbarset(LaserPos, "Lasers Off", ToolbarLasersOff%);
    return 1;
end

func ToolbarLasersOff%()
    SampleKey("z");
    Toolbarset(LaserPos, "Lasers On", ToolbarLasersOn%);
    return 1;
end

'--------------------------------------------------------------------------------
' START SINE WAVE/PULSES FOR VIDEO
'--------------------------------------------------------------------------------

func ToolbarVidOn%()
    vidOn := 1;
    Yield();
    pulseDurationV := 33; ' For video alignment pulse
    pulseWaitV := 1000 * 1/sinHzChair - pulseDurationV - 5; ' For video alignment
    SetSequencerValues();
    SampleKey("V");
    Toolbarset(VidPos, "Video Off", ToolbarVidOff%);
    return 1;
end

func ToolbarVidOff%()
    vidOn := 0;
    Yield();
    SampleKey("v");
    Toolbarset(VidPos, "Video On", ToolbarVidOn%);
    return 1;
end

'--------------------------------------------------------------------------------
' PULSE FUNCTIONS
'--------------------------------------------------------------------------------

func ToolbarPulseConfig%()
    DlgCreate("Pulse settings"); ' Start new dialog
    ' DlgReal(1, "Period (ms)", 0, 300000);
    DlgReal(1, "Number of Pulses", 0, 1000);
    DlgReal(2, "Pulse duration (ms)", 0, 5000);
    DlgReal(3, "Interpulse interval (ms)", 0, 5000);
    DlgReal(4, "Pulse phase (deg)", 0, 360);
    DlgReal(5, "Pulses Occur Every X Cycles?", 1, 10000);
    DlgShow(pNumber, pulseDuration, pulseInterval, pulsePhase, everyNCycles);
    SetPulseSettings%();
    return 1;
end

func SetPulseSettings%()
    pulsePeriod := 1/sinHzChair * 1000;
    fullPulse := 0;
    pWait := (pulsePeriod/2) - 4 - (pNumber *(pulseDuration + pulseInterval + 1));

    if pWait < 0 then
        pWait := 0 ;
        fullPulse := 1; ' Immediate switching between states
    endif
    pDuration := pulseDuration -2;
    pWait2 := pWait-2;
    pInterval := pulseInterval;

    if pInterval > 1 then
        pInterval := pulseInterval -3;
    endif

    SetSequencerValues();
    return 1;
end

'--------------------------------------------------------------------------------
' STEP FUNCTIONS
'--------------------------------------------------------------------------------

func ToolbarStepOn%()
    stepOn% := 1;
    if (stepStim = 0) and (stepLight = 0) then
        if (stepPeriod - (2 * stepLength)) > 0 then
  	 SampleKey("T");
  	 ToolbarSet(StepPos, "Step Stop", ToolbarStepOff%);
        else
            if QueTime > 0 then
                SampleKey("K");
                ToolbarSet(stepPos, "Step Stop", ToolbarStepOff%);
            else
                SampleKey("k");
                ToolbarSet(stepPos, "Step Stop", ToolbarStepOff%);
            endif
        endif
    else
        if stepLight = 1 and stepStim = 0 then
            stepOn% := 1; Yield();
            prevTime := MaxTime();
            measuredZeroChair := ChanMeasure(hhposCh%, 2, prevTime-2, prevTime);
            measuredZeroDrum := ChanMeasure(htposCh%, 2, prevTime-2, prevTime);
            docase
                case lightDur = stepLength and lightStart = 0 then
                    SampleKey("t"); ' Entire step

                case stepLen1 = 0 then
                    ' Aligned to beginning of step
                    SampleKey("b");

                case stepLen3 = 0 then
                    ' Aligned to end of step
                    SampleKey("e");

                else
                    ' Somewhere in the middle of step
                    SampleKey("d"); ' Delayed/partial
            endcase;
            ToolbarSet(StepPos, "Step Stop", ToolbarStepOff%);
        endif
        if stepStim = 1 and stepLight = 1 then
            SampleKey("u"); ' Currently non functional 8/2/12?
            ToolbarSet(StepPos, "Step Stop", ToolbarStepOff%);
        endif
    endif
    return 1;
end

func ToolbarStepOff%()
    SampleKey("I");
    stepOn% := 0;
    ToolbarSet(StepPos, "Step Start", ToolbarStepOn%);
    return 1;
end

func ToolbarStepConfig%()
    ' User dialog
    ' StepConfigWindow();


    ' Convert to exact numbers, accounting for software delays
    ' Max 11-2019: If you input a 1000ms stepPeriod it will not end up being 1000ms. idk why, sorry. Spike2 issue

    sRest1 := (stepPeriod  - stepLength - stepLength)/2 - 3;
    if sRest1 < 0 then
        sRest1 := 0;
    endif

    sLength := stepLength - 3;
    if sLength < 0 then
        sLength := 0;
    endif

    sRest2 := sRest1 - 1;
    if sRest2 < 0 then
        sRest2 := 0;
    endif

    ' Chair and drum velocity
    sAmpChair := ChairVel2Int32%(stepAmpChair); ' Amp chair
    sAmpChairN := 0-sAmpChair; ' Amp chair (opposite direction)
    sAmpDrum := DrumVel2Int32%(stepAmpDrum); ' Amp drum
    sAmpDrumN := 0-sAmpDrum; ' Amp drum (opposite direction)

    ' Light pulse
    if stepLight = 1 then

        ' If light pulse is not exactly the same as step pulse, break into 3 segments
        if lightDur <> stepLength or lightStart <> 0 then
            stepLen1 := max(lightStart - 3, 0); ' Chair alone
            stepLen2 := lightDur - 2; ' Chair+light
            stepLen3 := max(stepLength - lightDur - max(lightStart, 2) - 2, 0); ' Chair alone

            if stepLen3 = 0 then ' Small adjustment to account for delay if light aligned to end of step
                    stepLen2 := stepLen2-1;
            endif
        endif

    endif

    if stepStim = 1 then
      	pNumber := trunc((stepLength-4)/(pulseDuration + pulseInterval));
      	pDuration := pulseDuration -2;
      	pInterval := pulseInterval -3;
      	sLength1 := stepLength - ((pulseDuration + pulseInterval) * pNumber)-4;
    endif

    ' testing
    SetPulseSettings%();
    Yield();
    SetSequencerValues();
    return 1;
end

func StepConfigWindow%()
    DlgCreate("Step settings"); ' Start new dialog for entering step commands
    DlgReal(1, "Total Period (ms)", 0, 21000);
    DlgReal(2, "Step length (ms)", 0, 15000);
    DlgReal(3, "Chair Velocity (deg/sec)", -100, 100);
    DlgReal(4, "Drum Velocity (deg/sec)", -100, 100);
    DlgCheck(5, "Stimulate");
    DlgReal(6, "Pulse duration (ms)", 0, 5000);
    DlgReal(7, "Interpulse interval (ms)", 0, 5000);
    DlgCheck(8, "Light");
    DlgReal(9, "Light duration (ms)", 0, 5000);
    DlgReal(10, "Start time rel. step", 0, 5000);
    DlgShow(stepPeriod, stepLength, stepAmpChair, stepAmpDrum, stepStim, pulseDuration, pulseInterval, stepLight, lightDur, lightStart);

    ToolbarStepConfig%();
    return 1;
end

'--------------------------------------------------------------------------------
' STIM/PULSE FUNCTIONS
'--------------------------------------------------------------------------------

func ToolbarStimOn%()
    if fullPulse = 1 then
        SampleKey("Q");
    else
        SampleKey("P");
    endif
    sineOn% := 0;
    Yield();
    Toolbarset(PulsePos, "Pulse Off", ToolbarStimOff%);
    return 1;
end

func ToolbarStimOff%()
    SampleKey("p");
    Yield();
    SampleKey("I");
    Yield();
    sineOn% := 0;

    Toolbarset(PulsePos, "Pulse On", ToolbarStimOn%);
    return 1;
end

'--------------------------------------------------------------------------------
' TRACKING FUNCTIONS
' Constantly updates to track the eye movements of the mouse and adjust the drum to have a proportional velocity
' We don't want to move the chair at all, just the drum
' The notes inline below will be helpful in terms of determining areas where the protocol needs to be improved
'--------------------------------------------------------------------------------

proc trackEye()
    ' Find the current eye position based on the identified channel from calibration
    ' Alternatively, you could compute the mean of both channels
    var currEyePos;
    if bestChannel = 1 then
        currEyePos := ChanValue(heposCh1%, prevCommTime);
    else
        currEyePos := ChanValue(heposCh2%, prevCommTime);
    endif

    ' Compute the desired drum velocity command
    var eyeSign;
    if eyePositiveIsClockwise% = 1 then
        eyeSign := -1;
    else
        eyeSign := 1;
    endif
    var directionSign := (currEyePos - nullEyePos) * leakInstabilityScale * eyeSign;
    if directionSign < 0 then
        directionSign := 1;
    else
        directionSign := -1;
    endif
    var degreeDiff := (currEyePos - nullEyePos) * eyeScaleFactor;

    PrintLog("currEyePos = %f V or %f deg\n", currEyePos, currEyePos * eyeScaleFactor);
    PrintLog("nullEyePos = %f V or %f deg\n", nullEyePos, nullEyePos * eyeScaleFactor);
    PrintLog("degreeDiff = %f deg\n", degreeDiff);

    degreeDiff := Abs(degreeDiff);
    drumVelCommand := degreeDiff * gain;
    drumVelCommand := Min(drumVelCommand, maxTrackVel);
    drumVelCommand := drumVelCommand * directionSign;

    PrintLog("drumVelCommand = %f deg/s\n", drumVelCommand);
end

proc returnDrum()
    var currDrumPos := ChanValue(htposCh%, LastTime(htposCh%, prevCommTime));
    ' PrintLog("currDrumPos: %f deg, DrumDegreesPerSecondOffset: %f deg/s\n", currDrumPos, DrumDegreesPerSecondOffset);
    var sign;
    if currDrumPos < 0 then
        sign := -1;
    else
        sign := 1;
    endif
    drumVelCommand := Min(Abs(currDrumPos), maxDrumVel);
    drumVelCommand := -drumVelCommand * sign;
end

proc returnChair()
    var currChairPos := ChanValue(hhposCh%, LastTime(hhposCh%, prevCommTime));
    ' PrintLog("currChairPos: %f deg, ChairDegreesPerSecondOffset: %f deg/s\n", currChairPos, ChairDegreesPerSecondOffset);
    var sign;
    if currChairPos < 0 then
        sign := -1;
    else
        sign := 1;
    endif
    chairVelCommand := Min(Abs(currChairPos), maxChairVel);
    chairVelCommand := -chairVelCommand * sign;
end

' This is called once every deltaComm seconds
proc sendCommand()
    prevCommTime := MaxTime();
    if isTracking% = 1 then
        trackEye();
    else
        returnDrum();
        returnChair();
    endif
    drumVelCommand := 0;
    SetSequencerValues();
end

func ToolbarTrackConfig%()
    DlgCreate("Eye Tracking Config");
    DlgReal(1, "Delta (s)", 0.000001, 10);
    DlgReal(2, "Gain", 0.0001, 100);
    DlgReal(3, "Gain increment", 0, 100);
    DlgList(4, "Train type", "Leak|Instability");
    DlgList(5, "Best eye channel", "1|2");
    DlgReal(6, "Calibration scale factor (deg/V)", -200, 200);
    DlgReal(7, "Max track velocity (deg/s)", 1, 20);
    DlgList(8, "Eye positive is...", "Counter-clockwise|Clockwise");
    DlgShow(deltaComm, gain, gainIncrement, leakInstabilityGUI, bestChannelGUI, eyeScaleFactor, maxTrackVel, eyePositiveIsClockwise%);

    SetTrackingSettings%();
    return 1;
end

' Allows leak or instability to be chosen in menu, and scales velocities accordingly
func SetTrackingSettings%()
    docase
        case leakInstabilityGUI = 0 then ' leaky
            leakInstabilityScale := 1;
        case leakInstabilityGUI = 1 then ' Unstable
            leakInstabilityScale := -1;
    endcase
    bestChannel := bestChannelGUI + 1; ' Because list is 0-indexed
    return 1;
end

proc findNullEye()
    prevNullTime := MaxTime();

    var nullEyeDuration := prevNullTime;
    if nullEyeDuration * 1000 > 100000000 then ' Max array size in Spike2
        nullEyeDuration := 100000;
    endif

    var buffer[nullEyeDuration * 1000];
    var n%;

    if bestChannel = 1 then
        n% := ChanData(heposCh1%, buffer, prevNullTime - nullEyeDuration, prevNullTime);
    else
        n% := ChanData(heposCh2%, buffer, prevNullTime - nullEyeDuration, prevNullTime);
    endif

    ' Compute median over the last nullEyeDuration seconds
    ArrSort(buffer[:n%]);
    var i := Floor(n% / 2);
    var chanMedian := buffer[i];
    nullEyePos := chanMedian;

    if bestChannel = 1 then
        HCursor(heposCh1%, nullEyePos, heposCh1%);
    else
        HCursor(heposCh2%, nullEyePos, heposCh2%);
    endif

    PrintLog("n: %f, nullEyePos: %f\n", n%, nullEyePos);
end

func ToolbarFindNullEye%()
    findNullEye();
    return 1;
end

func ToolbarTrackEyeOn%()
    ToolbarLightOn%(); Yield();
    SampleKey("C");
    Toolbarset(TrackPos, "Track Off", ToolbarTrackEyeOff%);
    isTracking% := 1;
    return 1;
end

func ToolbarTrackEyeOff%()
    ToolbarLightOff%(); Yield();
    SampleKey("C");
    Toolbarset(TrackPos, "Track On", ToolbarTrackEyeOn%);
    isTracking% := 0;
    return 1;
end

'--------------------------------------------------------------------------------
' OTHER FUNCTIONS
'--------------------------------------------------------------------------------

proc ToolbarConfig()
    ToolbarClear(); ' Remove any old buttons

    ToolbarSet(0, "Idle", ToolbarIdle%);
    ToolbarSet(1, "Quit",  ToolbarQuit%);
    ToolbarSet(InitPos, "Init", ToolbarInit%);
    ' ToolbarSet(LightPos, "Light On", ToolbarLightOn%);
    ' ToolbarSet(LaserPos, "Lasers On", ToolbarLasersOn%);
    ToolbarSet(SinePos, "Sine On", ToolbarSineStart%);
    ToolbarSet(SineConfigPos, "Sine Config", ToolbarSineConfig%);
    ' ToolbarSet(PulseConfigPos, "Pulse Config", ToolbarPulseConfig%);
    ' ToolbarSet(PulsePos, "Pulse On", ToolbarStimOn%);
    ' ToolbarSet(VidPos, "Video On", ToolbarVidOn%);
    ' ToolbarSet(StepPos, "Step On", ToolbarStepOn%);
    ' ToolbarSet(StepConfigPos, "Step Config", StepConfigWindow%);
    ToolbarSet(ExpmtPos, "Run Expmt", ToolbarRunExpmt%);
    ToolbarSet(ExpmtConfigPos, "Expmt Config", ToolbarConfigExpmt%);
    ToolbarSet(CommentPos, "Comment", ToolbarComment%);
    ToolbarSet(NewFilePos, "New File", ToolbarNew%);
    ToolbarSet(TrackPos, "Track On", ToolbarTrackEyeOn%);
    ToolbarSet(TrackConfigPos, "Track Config", ToolbarTrackConfig%);
    ToolbarSet(FindNullEyePos, "Find Null Pos", ToolbarFindNullEye%);
    ' ToolbarSet(devPos, "Dev", DevParams%);
    Toolbar("", 231);
end

proc WindowConfig()
    SampleClear(); ' Set the sampling configuration to a standard state
    var err% := SampleSequencer(SequencerFile$);
    if err% < 0 then
        Message(Print$("I can't find your Sequencer File: %s", Error$(err%)));
        halt
    endif

    ' Channel 1
    SampleWaveform(HTVELChCom%, 0, 1000); ' Channel = 1, port = 0, ideal sampling rate = 1000 Hz
    SampleCalibrate(HTVELChCom%, "deg/s", DrumVoltage2Velocity, DrumVoltage2VelocityOffset);
    SampleTitle$(HTVELChCom%, "HTVEL");
    SampleComment$(HTVELChCom%, "Velocity signal sent to drum");

    ' Channel 2
    SampleWaveform(HHVELChCom%, 1, 1000);
    SampleCalibrate(HHVELChCom%, "deg/s", ChairVoltage2Velocity, ChairVoltage2VelocityOffset);
    SampleTitle$(HHVELChCom%, "HHVEL");
    SampleComment$(HHVELChCom%, "Velocity signal sent to chair");

    ' Channel 3
    SampleTalker(htposCh%, "LS7366-3", 0);
    SampleCalibrate(htposCh%, "deg", 1111.111, 0);
    SampleTitle$(htposCh%, "htpos");
    SampleComment$(htposCh%, "Drum position");

    ' Channel 4
    SampleTalker(hhposCh%, "LS7366", 0);
    SampleCalibrate(hhposCh%, "deg", 1111.111, 0);
    SampleTitle$(hhposCh%, "hhpos");
    SampleComment$(hhposCh%, "Chair position");

    ' Channel 5
    SampleWaveform(heposCh1%, 4, 1000);
    SampleCalibrate(heposCh1%, "V", EyeVoltage2Position, EyeVoltage2PositionOffset);
    SampleTitle$(heposCh1%, "hepos1");
    SampleComment$(heposCh1%, "Eye position 1");

    ' Channel 6
    SampleWaveform(heposCh2%, 5, 1000);
    SampleCalibrate(heposCh2%, "V", EyeVoltage2Position, EyeVoltage2PositionOffset);
    SampleTitle$(heposCh2%, "hepos2");
    SampleComment$(heposCh2%, "Eye position 2");

    ' Channel 9
    ' SampleEvent(9, 0, 2, 1000); ' func SampleEvent(chan%, port%, type%, rate);
    ' SampleTitle$(9, "TTL1");
    ' SampleComment$(9, "TTL1: Shutter");

    ' Channel 10
    ' SampleEvent(10, 1, 2, 1000);
    ' SampleTitle$(10, "TTL2");
    ' SampleComment$(10, "TTL2: IR LED");

    ' Channel 11
    ' SampleEvent(11, 2, 2, 1000);
    ' SampleTitle$(11, "TTL3");
    ' SampleComment$(11, "TTL3: L laser");

    ' Channel 12
    ' SampleEvent(12, 3, 2, 1000);
    ' SampleTitle$(12, "TTL4");
    ' SampleComment$(12, "TTL4: R laser");

    ' Channel 15 - ALEX FANNING
    ' SampleEvent(15, 4, 2, 1000); ' - ALEX FANNING
    ' SampleTitle$(15, "TTL5"); ' - ALEX FANNING
    ' SampleComment$(15, "TTL5: FP Pulse"); ' - ALEX FANNING

    ' Channel 30
    SampleTextMark(200);

    SampleWindow% := FileNew(0, 1);

    ' Channel v1
    htvelCh% := VirtualChan(0, "", 0, 0.001);
    VirtualChan(htvelCh%, "rm(3)"); ' Copy from channel 3
    ChanprocessAdd(htvelCh%, 3); ' Differentiate
    ChanprocessArg(htvelCh%, 1, 1, 0.00);
    ChanTitle$(htvelCh%, "htvel");
    ChanComment$(htvelCh%, "Drum velocity");

    ' Channel v2
    hhvelCh% := VirtualChan(0, "", 0, 0.001);
    VirtualChan(hhvelCh%, "rm(4)"); ' Copy from channel 4
    ChanprocessAdd(hhvelCh%, 3); ' Differentiate
    ChanprocessArg(hhvelCh%, 1, 1, 0.00);
    ChanTitle$(hhvelCh%, "hhvel");
    ChanComment$(hhvelCh%, "Chair velocity");

    ' Set optimise mode (do this last)
    SampleOptimise(1, 1, 0, 2, 50);

    ' Continuous sampling
    SampleMode(1);

    SetSequencerValues();

    ' Show certain channels in a particular order
    ChanShow(-1); ' Show all
    ChanOrder(0, -1, "1, 2, 3, 4, 5, 6, 30, 31");
    ' I couldn't figure out how to put the virtual channels in this order -KV

    ' Channel y-range (channel num, low, high)
    YRange(1, -10, 10);
    YRange(2, -10, 10);
    YRange(3, -10, 10);
    YRange(4, -10, 10);
    YRange(5, -10, 10);
    YRange(6, -10, 10);
    YRange("v1", -10, 10);
    YRange("v2", -10, 10);

    XRange(0, 20); ' Set the default X axis time range=
    ' Background Colour'
    ViewColour(0, 5);
    ' Font
    FontSet("Verdana", 8, 0);
    ' Chan colors
    chanColour(HTVELChCom%, 1, 28);
    chanColour(htposCh%, 1, 28);
    chanColour(htvelCh%, 1, 28);

    chanColour(HHVELChCom%, 1, 30);
    chanColour(hhposCh%, 1, 30);
    chanColour(hhvelCh%, 1, 30);

    chanColour(heposCh1%, 1, 1);
    chanColour(heposCh2%, 1, 1);
    ' Useful Zero line indicators
    HCursorNew(1);
    HCursor(1, 0, 1);

    HCursorNew(2);
    HCursor(2, 0, 2);

    HCursorNew(3);
    HCursor(3, 0, 3);

    HCursorNew(4);
    HCursor(4, 0, 4);

    HCursorNew(5);
    HCursor(5, 0, 5);

    HCursorNew(6);
    HCursor(6, 0, 6);
end

func ToolbarNew%()
    WindowConfig();
    ' Make window full screen
    ' WindowVisible(3);
    return 1;
end

func ToolbarComment%()
    DlgCreate("Comment"); ' Start new dialog for entering comments
    DlgString(1, "Comment", 200);
    DlgShow(comment$);
    SampleText(comment$);
    return 1;
end

func ToolbarRunExpmt%()
    isRunningExpmt% := 1;
    nextPhase% := 1;
    blocksCompleted% := 0;
    goalTime := MaxTime();
    ToolbarSet(ExpmtPos, "Quit Expmt", ToolbarQuitExpmt%);
    return 1;
end

func ToolbarQuitExpmt%()
    isRunningExpmt% := 0;
    ToolbarInit%();
    ToolbarSet(ExpmtPos, "Run Expmt", ToolbarRunExpmt%);
    return 1;
end

func ToolbarInit%()
    ' ToolbarLightOff%(); Yield();
    ' ToolbarStepOff%(); Yield();
    ToolbarSineStop%(); Yield();
    ' ToolbarStimoff%(); Yield();
    ' ToolbarLasersOff%(); Yield();
    ToolbarTrackEyeOff%(); Yield();
    SampleKey("I");
    return 1;
end

func ToolbarQuit%()
    SampleKey("O");
    return 0;
end

func DevParams%()
    DlgCreate("Dev Params"); ' Start new dialog
    DlgReal(1, "W", -2, 2);
    DlgReal(2, "X", -2, 2);
    DlgReal(3, "Y", -2, 2);
    DlgReal(4, "Z", -2, 2);
    DlgShow(W, X, Y, Z);
    return 1;
end

' Send values to the sequencer
proc SetSequencerValues()
    actualChairPh := ((sinPhChair + pulsePhase + 180) mod 360) - 180;
    actualDrumPh  := ((sinPhDrum  + pulsePhase + 180) mod 360) - 180;

    ' Chair parameters
    SampleSeqVar(23, ChairAmp2Int32%(ChairDegreesPerSecondOffset));
    SampleSeqVar(27, ChairAmp2Int16%(sinAmpChair));
    SampleSeqVar(28, Angle2Int32%(actualChairPh));
    SampleSeqVar(29, Hz2Int32%(sinHzChair));

    ' Drum parameters
    SampleSeqVar(22, DrumAmp2Int32%(DrumDegreesPerSecondOffset));
    SampleSeqVar(24, DrumAmp2Int16%(sinAmpDrum));
    SampleSeqVar(25, Angle2Int32%(actualDrumPh));
    SampleSeqVar(26, Hz2Int32%(sinHzDrum));

    ' Pulse parameters
    SampleSeqVar(33, pWait);
    SampleSeqVar(34, pNumber);
    SampleSeqVar(35, pDuration);
    SampleSeqVar(36, pInterval);
    SampleSeqVar(37, pStart);

    ' Step parameters
    SampleSeqVar(38, sRest2);
    SampleSeqVar(39, sStart);
    SampleSeqVar(40, sLength);
    SampleSeqVar(41, sLength1);
    SampleSeqVar(42, sRest1);
    SampleSeqVar(43, sAmpChair);
    SampleSeqVar(44, sAmpDrum);
    SampleSeqVar(45, sAmpChairN);
    SampleSeqVar(46, sAmpDrumN);
    SampleSeqVar(47, stepLen1); ' For delayed light pulse with step
    SampleSeqVar(48, stepLen2);
    SampleSeqVar(49, stepLen3);
    SampleSeqVar(50, pulseDurationV);
    SampleSeqVar(51, pulseWaitV);
    SampleSeqVar(52, pulsePeriod);
    SampleSeqVar(54, everyNCycles);
    SampleSeqVar(55, QueTime);
    SampleSeqVar(56, DrumAmp2Int32%(DrumDegreesPerSecondOffsetDefault));
    SampleSeqVar(57, ChairAmp2Int32%(ChairDegreesPerSecondOffsetDefault));
    SampleSeqVar(58, halfPhaseDelay);

    ' Vel commands for non-periodic movement (e.g. integrator experiment)
    SampleSeqVar(65, DrumVel2Int32%(drumVelCommand + DrumDegreesPerSecondOffsetDefault));
    SampleSeqVar(66, ChairVel2Int32%(chairVelCommand + ChairDegreesPerSecondOffsetDefault));
end

func driftFix%()
    ' drift back to 0 if sine wave isn't running
    docase
        case stepOn% = 1 then
            ' SampleKey("7");
            if stepAmpChair > 0 then
                ' SampleKey("8");
                centerLineChair := (stepLength/1000) * stepAmpChair * W;
            endif
            if stepAmpChair < 0 then
                ' SampleKey("9");
                centerLineChair := (stepLength/1000) * stepAmpChair * X;
            endif
            if stepAmpChair = 0 then
                ' SampleKey("0");
                centerLineChair := 0;
            endif

            if stepAmpDrum > 0 then
                ' SampleKey("7");
                centerLineDrum := (stepLength/1000) * stepAmpDrum * Y;
            endif
            if stepAmpDrum < 0 then
                ' SampleKey("6");
                centerLineDrum := (stepLength/1000) * stepAmpDrum * Z;
            endif
            if stepAmpDrum = 0 then
                centerLineDrum := 0;
            endif

        case sineOn% = 1 or vidOn = 1 then
            var chairSign := 1; ' set default to 1 if phase = 0
            var drumSign := 1;

            ' figure out whether we want velocity to be positive or negative
            if sinPhChair <> 0 then
                chairSign := sinPhChair / Abs(sinPhChair);
            endif
            if sinPhDrum <> 0 then
                drumSign := sinPhDrum / Abs(sinPhDrum);
            endif

            ' convert from the sine amplitude signal to the actual position amplitude
            var trueAmpChair := sinAmpChair / (2 * 3.14159 * sinHzChair);
            var trueAmpDrum := sinAmpDrum / (2 * 3.14159 * sinHzDrum);

            ' calculates the center y value according to the phase given
            var centerForPhaseChair := trueAmpChair * (1 - cos((-1 * sinPhChair)/radianConversion));
            var centerForPhaseDrum := trueAmpDrum * (1 - cos((-1 * sinPhDrum)/radianConversion));

            ' takes into account that chair/drum may not start at 0
            var theoreticalCenterChair := (centerForPhaseChair + measuredZeroChair) * chairSign;
            var theoreticalCenterDrum := (centerForPhaseDrum + measuredZeroDrum) * drumSign;

            ' NOTE: There is something funky with the motors where there is an error that follows a sine wave from phase
            ' WE DON'T KNOW WHY, ONLY THAT IT HAPPENS
            ' The drift coefficients need to be calculated manually by testing the error for different phase offsets
            var errorOffsetChair := ChairDriftFactor * sinAmpChair * sin(2 * sinPhChair / radianConversion);
            var errorOffsetDrum := DrumDriftFactor * sinAmpDrum * sin(2 * sinPhDrum / radianConversion);

            centerLineChair := (theoreticalCenterChair + errorOffsetChair) * ChairResetDirection;
            centerLineDrum := (theoreticalCenterDrum + errorOffsetDrum) * DrumResetDirection;

        else
            centerLineChair := 0; ' 29.9841
            centerLineDrum := 0;
    endcase

    prevTime := MaxTime();
    var hhposPrevTime := LastTime(hhposCh%, prevTime);
    var htposPrevTime := LastTime(htposCh%, prevTime);
    ' Measure slope from last 1 cycle of chair/drum position feedback
    var hhposSlope := ChanValue(hhposCh%, hhposPrevTime) - ChanValue(hhposCh%, hhposPrevTime - (1/sinHzChair));
    var htposSlope := ChanValue(htposCh%, htposPrevTime) - ChanValue(htposCh%, htposPrevTime - (1/sinHzDrum));

    var hhposPos := ChanMeasure(hhposCh%, 2, hhposPrevTime - (1/sinHzChair), hhposPrevTime) + (centerLineChair);
    var htposPos := ChanMeasure(htposCh%, 2, htposPrevTime - (1/sinHzDrum), htposPrevTime) + (centerLineDrum);

    ' Scales *1 for D253, *-1 for D019
    ChairDegreesPerSecondOffset := (ChairDegreesPerSecondOffsetDefault - hhposSlope/4 - hhposPos/4) * ChairResetDirection;
    DrumDegreesPerSecondOffset := (DrumDegreesPerSecondOffsetDefault - htposSlope/4 - htposPos/4) * DrumResetDirection;

    ' PrintLog("ChairDegreesPerSecondOffset: %f, DrumDegreesPerSecondOffset: %f\n", ChairDegreesPerSecondOffset, DrumDegreesPerSecondOffset);

    ' ToolbarStepConfig%();
    SetSequencerValues();
end

'--------------------------------------------------------------------------------
' CONVERSION FUNCTIONS
'--------------------------------------------------------------------------------

' Angles in the range [-180, 180] should span [-2147483648.0, 2147483647.0]
func Angle2Int32%(angle)
    return angle * 2147483647.0 / 180;
end

' Rates are calculated in degrees per sequencer step, with one degree being 11930465.
func Hz2Int32%(hz)
    ' This assumes a sequencer rate of 1 kHz
    return hz * 11930465 * 360 / 1000;
end

' Amplitudes must be converted such that [0, 32768] spans the positive range of the dac, e.g. [0, 5]
' We have to include the dac maximum and the degrees-per-second-to-voltage conversion factor. Does not include offset.
func ChairAmp2Int16%(amp)
    return amp * ChairDegreesPerSecond2Voltage * 32768 / MaxVoltage;
end

func DrumAmp2Int16%(amp)
    return amp * DrumDegreesPerSecond2Voltage * 32768 / MaxVoltage;
end

func ChairAmp2Int32%(amp)
    return amp * ChairDegreesPerSecond2Voltage * 2147483647 / MaxVoltage;
end

func DrumAmp2Int32%(amp)
    return amp * DrumDegreesPerSecond2Voltage * 2147483647 / MaxVoltage;
end

' steps
' Command velocities must be converted such that [0, 2147483647] spans the positive range of the dac, e.g. [0, 5]
' We have to include the dac maximum and the degrees-per-second-to-voltage conversion factor.
func ChairVel2Int32%(amp)
    return (amp + ChairDegreesPerSecondOffset) * ChairDegreesPerSecond2Voltage* 2147483647 / MaxVoltage;
end

func DrumVel2Int32%(amp)
    return (amp + DrumDegreesPerSecondOffset) * DrumDegreesPerSecond2Voltage * 2147483647 / MaxVoltage;
end
