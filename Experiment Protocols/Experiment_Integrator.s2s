' Experiment protocol file for oculomotor integrator training experiments
'
' Contact Ella Tessier-Lavigne with any questions
' ellatl@stanford.edu or ellatl31@gmail.com
'--------------------------------------------------------------------------------
' Rig-Specific parameters file Location
'--------------------------------------------------------------------------------
'D019
#include "C:\\Users\\raymondlab\\Documents\\Code\\Experiment Protocols\\Parameters_D006_Integrator.s2s"

'''D253
''#include "C:\\Users\\RaymondLab\\Documents\\Code\\Experiment Protocols\\Parameters_D253_Ella.s2s"

'--------------------------------------------------------------------------------
' Universal Parameters File Location
'--------------------------------------------------------------------------------
''#include "C:\\Users\\Raymond Lab\\Documents\\Code\\Experiment Protocols\\Parameters_Universal_Ella.s2s"
#include "C:\\Users\\raymondlab\\Documents\\Code\\Experiment Protocols\\Parameters_Universal_Integrator.s2s"


'--------------------------------------------------------------------------------
' MAIN PROGRAM
'--------------------------------------------------------------------------------
ToolbarConfig();

'--------------------------------------------------------------------------------
' Toolbar Callbacks
'--------------------------------------------------------------------------------
Func ToolbarIdle%()
  'This function calls repeatedly whenever nothing else is happening
  'if runExmpt=1, it is used to run a full expmt automatically.  -HP
  'expmtMode: 0=habit, 1=0x, 2=2x, 3=ipsi stim, 4=contra stim
  'test: 0=wait, 1=test, 2=train

  ' Check a valid sampling view is running
  var currView := ViewKind();
  if  currView <> 0 then
    return 1;
  endif;

  'Call TrackEye function repeatedly when it's in the training portion
  'this might not be how I want to do this but it's how they do driftFix
  if MaxTime() > (prevTime + delta) then
    'i don't think we want the commented code below but leaving it in case'
    'if driftFix = 1 then
    ''    driftFix%();
    'endif;
    if startTracking% = 1 then
      trackEye%();
    endif;
  endif;

  'If an experiment is running: - need to update parameters (ex. testLength, runLength) to reflect protocol we want to follow
  if runExpmt% = 1 then

      'Check the time. MaxTime() is the current time - compare it to the goal time of each segment
      if  MaxTime() > goalTime then

        docase

          ' MISC GAP A - runs at beginning and end
          case test% = 0 then
              startTracking% := 0;
              ToolbarTrackEyeOff%();
              'SampleKey("r");
              goalTime := MaxTime() + 5;
              SampleKey("x");
              ToolbarLightOff%(); Yield();
              ToolbarInit%(); Yield();

              'reached the end of the experiment'
              if prePostNum = 3 then
                ToolbarQuitExpmt%();
                Return(1);
              endif

              test% := 7; 'skip runFlash'

          ' MISC GAP B - flash before test
          case test% = 7 then
              SampleKey("7");
              goalTime := MaxTime() + 5;
              runFlash();
              test% := 4;

          ' MISC TEST - pre- and post-testing
          case test% = 4 then
              SampleKey("4");
              ToolbarLightOff%();
              startTracking% := 1;
              ToolbarTrackEyeOn%();
              goalTime := MaxTime() + testLength;
              docase 'prePostNum starts at 1, so 1st case is continuing experiment, second is ending experiment'
                case prePostNum = 1 then
                  prePostNum := prePostNum + 1;
                  test% := 3;
                case prePostNum = 2 then
                  prePostNum := prePostNum + 1;
                  test% := 0;
              endcase

          ' BLOCK: GAP A
          case test% = 1 then
              SampleKey("x");
              goalTime := MaxTime() + 120;
              startTracking% := 0;
              ToolbarLightOff%(); Yield();
              ToolbarInit%(); Yield();
              test% := 6;

          ' BLOCK: GAP B - flash before training
          case test% = 6 then
              SampleKey("6");
              goalTime := MaxTime() + 5;
              runFlash();
              test% := 3;

          ' BLOCK: TRAIN
          case test% = 3 then
              SampleKey("3");
              SampleKey("X");
              goalTime := MaxTime() + runLength;
              Yield(.3);

              'if it's before the first training period, run the findNullEye function from the parameters_universal file'
              if rep% = 0 then
                findNullEye();
              endif;
              if rep% > 0 then
                gain := gain + incrementSize; 'this is currently how we're incrementing gain'
                'a note: you currently choose the number of blocks you want and how you're incrementing gain'
                'and it only goes that many times. a possible improvement would be to make it so that the number of test'
                'blocks is determined by dividing (gainCeiling - gain) / incrementSize'
              endif;

              rep% := rep% + 1;
              if rep% = nBlocks% then
                  test% := 0;
              else
                  test% := 1;
              endif;
              ToolbarLightOn%(); Yield(.1);
              'nullEyePos := 0;
              startTracking% := 1;

        endcase;
      endif;
  endif;

  Return(1);
End

'--------------------------------------------------------------------------------
'Configure expmt settings window
'--------------------------------------------------------------------------------
Func ToolbarConfigExpmt%()
  DlgCreate("Experiment settings");  'Start new dialog
  DlgInteger(1,"Number of run-test blocks",0,100,0,0,1);
  DlgInteger(2,"Number of tests per block",1,100,0,0,1);    'set to 0 if not using Chair
  DlgReal(3,"Run length (s)",0,5000);
  DlgReal(4,"Test length (s)",0,5000);
  DlgList(5,"Expmt mode", "habit|x0|x2|ipsi|contra|steps");
  DlgInteger(6,"Light flash on?)",0,1,0,0,"0|1");
  DlgReal(7,"Test stim and bilat (0 or 1)",0,1);

  DlgShow(nBlocks%, nTestreps%, runLength, testLength, expmtMode, flashon%,testStim);

  docase
  case expmtMode = 0 then     'habit
      sinPhDrum := 90;
      sinPhChair := 90;
      sinAmpChair := 10;
      sinAmpDrum := 0;
  case expmtMode = 1 then     'x0
      sinPhDrum := 90;
      sinPhChair := 90;
      sinAmpChair := 10;
      sinAmpDrum := 10;
  case expmtMode = 2 then     'x2
      sinPhDrum := -90;
      sinPhChair := 90;
      sinAmpChair := 10;
      sinAmpDrum := 10;
  case expmtMode = 3  then     'ipsi
      sinPhChair := -90;'D019:-90, D253:90'
      sinAmpDrum := 0;
  case expmtMode = 4 then      'contra
      sinPhChair := 90; 'D019:90, D253:-90'
      sinAmpDrum := 0;
  case expmtMode = 5 then      'steps
      ToolbarStepConfig%();
  endcase;


  if testStim > 0 then
      ToolbarPulseConfig%()
  endif;

  SetSequencerValues();
  Return(1);
End
