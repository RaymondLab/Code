' New mouse-rig script
' Drew Haven
' Barbara Nguyen-Vu
' Soon-Lim Shin
' Started script: 2008-12-05 
'  04/06/12 add step light by BN, GZ
'  07/24/12 updated and debugged by Hannah Payne
'  10/31/12 Edited to test mag sensor on channel 7 (formerly ephsy)


'--------------------------------------------------------------------------------
' Defining Global variables
'--------------------------------------------------------------------------------

var SampleWindow%;
var SequencerFile$ := "C:\\Users\\public\\code\\SeqHP070915"; 'var SequencerFile$ := "C:\\Dropbox\\rlab\\code\\SeqHP030615"; 


var ArbStimFile$ := "C:\\Users\\Public\\code\\experiments\\irregStimExpmt_20170817.txt";     ' 1 ms pulse. 60 trials

var sinAmpChair := 10;
var sinHzChair := 1;
var sinPhChair := -90;  'Convert cos to sin
var sinAmpDrum := 10;
var sinHzDrum := 1;
var sinPhDrum := 90;
var actualChairPh;
var actualDrumPh;

var MaxVoltage := 10; '*** HP 1/10/14 +-10 V voltage range: check in Edit -> Edit Parameters

var stepPeriod := 2000; 'initializing variables for step commands
var stepLength := 500;
var sWait :=500-3;
var stepAmpChair := 10;
var stepAmpDrum := 10;
var stepStim :=0;

var sStart;
var sLength;
var sLength1;
var sRest1;
var sRest2;
var sAmpChair;
var sAmpDrum;
var sAmpChairN;
var sAmpDrumN;

var pulsePeriod := 1000;
var pNumber := 1;
var pulseDuration := 500;
var pulseInterval := 0;
var pulseStart :=0;
var pWait :=0;
var pWait2 :=0;
var pulseDurationV := 33; 'For video alignment pulse - duration
var pulseWaitV := 1000 - pulseDurationV - 5;    'For video alignment pulse - time between pulses
var pDuration;
var pInterval;
var pStart;
var pulsePhase := 0 ;
var stepLight :=0;
var lightDur :=500;
var lightStart :=0;
var comment$;
var fullPulse :=0;
var sineOn% := 0;
var i%;

'Chair converstion factors
var ChairDegreesPerSecond2Voltage := 0.009323; 'Chair velocity to voltage (Scale)  * Doubled after fixing scaling (10 V MaxVoltage) 1/10/14 HP
var ChairDegreesPerSecondOffset := -.2;         'Chair velocity to voltage (offset)  *** Input default Chair offset here

'Drum conversion factors
var DrumDegreesPerSecond2Voltage := 0.01;      'Drum velocity to voltage (Scale)
var DrumDegreesPerSecondOffset := 0.1;        'Drum velocity to voltage (offset)   *** Input default Drum offset here

'Channel 1: Scaling to display the drum COMMAND signal
var DrumVoltage2Velocity := 100;                'Voltage to Drum Velocity (Scale)
var DrumVoltage2VelocityC := 0;                 'Voltage to Drum Velocity (offset)

'Channel 2: Scaling to display the chair COMMAND signal 
var ChairVoltage2Velocity := 1/ChairDegreesPerSecond2Voltage; '107.42869;         'Voltage to Chair Velocity (Scale)     HP 1/10/14
var ChairVoltage2VelocityC := 0;                'Voltage to Chair Velocity (offset)

'Channel 3: Scaling for drum position readout
var DrumPosReadoutScale := 20;                   'Drum position readout scale (~100 deg/10V) 1/10/14
var DrumPosReadoutOffset := 0;                  'Drum position readout offset

'Channel 4: Chair position readout
var ChairPosReadoutScale := -18.07;              'Voltage to Chair Position (Scale) 
var ChairPosReadoutOffset := 0;                 'Voltage to Chair Position (offset)

'Channel 5/6: Eye position readout
var EyeVoltage2Position := 1;                   'Voltage to Eye Position (Scale)  %*** 20 HP 6/3
var EyeVoltage2PositionC := 0;                  'Voltage to Eye Position (offset)

'Channel 7: Chair velocity readout
var ChairVelReadoutScale := 1;             '%*** 103.18 2/3/14
var ChairVelReadoutOffset := 0;        

var htvelChan%; 'Channel for getting velocity from drum position
var hhvelChan%; 'Channel for getting velocity from chair position 

var hevelChan1%; 'Channel for getting eye velocity from magenetic eye position
var hevelChan2%; 'Channel for getting eye velocity from magenetic sensor eye pos 

var hepos%;       ' calculated eye pos
var hevel%;       ' calculated eye vel
var Offset1% := 0;
var Offset2% := 0;


'Variables for running automated experiment
var nBlocks% := 6;                 'Number of run-test blocks in exmpt  
var nTestreps% := 1;               'Number of times to repeat 40 sec test
var runLength := 300;             'Seconds to run protocol in each block(300 for 5 min)
var testLength := 45;             'Seconds to test 
var expmtMode := 2;               'expmtMode: 0=off, 1=0x, 2=2x, 3=ipsi stim, 4=contra stim
var testString$;
var runExpmt% := 0;               ' Random note: % denotes integer types
var rep% := 0;                    'Rep (5min run, 40 sec test)
var test% := 1;                   'test: 0=run testLength, 1=test testLength, 2=init&wait 20 sec, 3=init&wait 10 sec,  4=init&wait runLength
var testrep% :=0;
var goalTime := 1000000000;
var flashon% := 1;
var waitLength := 300;
var testStim := 0;
var prevTime := 0;
'Variables for running sequence of sine waves
var RunFreqs% := 0 ;
var freqs[5];
freqs[0] := .2;
freqs[1] := .5;
freqs[2] := 1;
freqs[3] := 2;
freqs[4] := 5;


' Variable for running sequence of timings
var phases[8];
var runTiming% := 0 ;
for i% := 0 to 7 do 
    phases[i%] := i%*45;
next;

' [0 45 90 135 180 225 270 315];         

'Order of toolbar buttons
const NewFilePos        := 2;   
const InitPos           := NewFilePos+1;
const CommentPos        := InitPos+1;
'const OffsetPos         := CommentPos+1;
'const OffsetAutoPos     := OffsetPos+1;
const LightPos          := CommentPos+1;
const LaserPos          := LightPos+1;
const SinePos           := LaserPos+1;
const SineConfigPos     := SinePos+1;
const PulsePos          := SineConfigPos+1;
const PulseConfigPos    := PulsePos+1;
const VidPos            := PulseConfigPos+1;
const StepPos           := VidPos+1;
const StepConfigPos     := StepPos+1;
const WavePos           := StepConfigPos+1;
const WaveTestPos       := WavePos+1;
' Order of channels

const HTVELCh% := 1;
const HHVELCh% := 2;
const htposCh% := 3;
const hhposCh% := 4;

'--------------------------------------

'--------------------------------------------------------------------------------
' MAIN PROGRAM
'--------------------------------------------------------------------------------
ToolbarConfig();

'--------------------------------------------------------------------------------
'Configure the Toolbar
'--------------------------------------------------------------------------------
Proc ToolbarConfig()
ToolbarClear();     'Remove any old buttons   

ToolbarSet(0, "Idle",ToolbarIdle%);
ToolbarSet(1, "Quit",  ToolbarQuit%);
ToolbarSet(InitPos, "Init", ToolbarInit%);
ToolbarSet(LightPos, "Light On", ToolbarLightOn%);
ToolbarSet(LaserPos, "Lasers On", ToolbarLasersOn%);
ToolbarSet(SinePos, "Sine On", ToolbarSineStart%);
ToolbarSet(SineConfigPos, "Sine Config", ToolbarSineConfig%);
ToolbarSet(PulseConfigPos, "Pulse Config", ToolbarPulseConfig%);
ToolbarSet(PulsePos, "Pulse On", ToolbarStimOn%);
ToolbarSet(VidPos, "Video On", ToolbarVidOn%);
ToolbarSet(StepPos, "Step On", ToolbarStepOn%);
ToolbarSet(StepConfigPos, "Step Config", ToolbarStepConfig%);
ToolbarSet(WavePos,"Play Wave",ToolbarWaveOn%);
ToolbarSet(WaveTestPos,"Play Laser Test",ToolbarWaveTestOn%);
ToolbarSet(CommentPos, "Comment", ToolbarComment%);
ToolbarSet(NewFilePos, "New File", ToolbarNew%);
Toolbar("", 231);  

End

'--------------------------------------------------------------------------------
' Set up channels and make window
'--------------------------------------------------------------------------------
Proc WindowConfig()

SampleClear(); 'Set the sampling configuration to a standard state
ArbitraryStim(); ' Load any arbitrary waveforms to play

'sequencer setup - returns zero if OK 
var err%; err% := SampleSequencer( SequencerFile$ ); 
if err%<0 then
	Message(Print$("I can't find your Sequencer File:%s",Error$(err%)));
	halt
endif

'Channel 1
'SampleWaveform(HTVELCh%,0,500);  'Channel= 1, port= 0, ideal sampling rate= 1000 Hz
'SampleCalibrate(HTVELCh%,"deg/s", DrumVoltage2Velocity, DrumVoltage2VelocityC);
'SampleTitle$(HTVELCh%,"HTVEL");
'SampleComment$(HTVELCh%, "Velocity Signal sent to drum");
'
'Channel 2
'SampleWaveform(HHVELCh%,1,500);
'SampleCalibrate( HHVELCh%, "deg/s", ChairVoltage2Velocity, ChairVoltage2VelocityC);
'SampleTitle$(HHVELCh%,"HHVEL");
'SampleComment$(HHVELCh%, "Velocity Signal sent to chair");
'
'Channel 3
SampleWaveform(htposCh%,2,500);
SampleCalibrate(htposCh%, "deg", DrumPosReadoutScale, DrumPosReadoutOffset);
SampleTitle$(htposCh%,"htpos");
SampleComment$(htposCh%, "Drum Position");

'Channel 4
SampleWaveform(hhposCh%,3,500);
SampleCalibrate(hhposCh%,"deg", ChairPosReadoutScale, ChairPosReadoutOffset);
SampleTitle$(hhposCh%,"hhpos");
SampleComment$(hhposCh%, "Chair Position");

'Channel 5
SampleWaveform(5,4,1000);
SampleCalibrate(5,"V",EyeVoltage2Position,EyeVoltage2PositionC);
SampleTitle$(5,"hepos1");
SampleComment$(5, "Eye Position 1");

'Channel 6
SampleWaveform(6,5,1000);
SampleCalibrate(6,"V", EyeVoltage2Position,EyeVoltage2PositionC);
SampleTitle$(6,"hepos2");
SampleComment$(6, "Eye Position 2");

'Channel 7
SampleWaveform(7,6,50000);
SampleCalibrate(7,"V",1, 0);
SampleTitle$(7,"ephys1");
'
'Channel 8
'SampleWaveform(8,7,50000);   ' Note: It might not actually reach this sampling frequency
'SampleCalibrate(8,"V",1,0);
'SampleTitle$(8,"ephys2");


'
''
''Channel 13
'SampleWaveform(13,14,50000);
'SampleCalibrate(13,"V",1, 0);
'SampleTitle$(13,"ephys3");
'
''Channel 14
'SampleWaveform(14,15,50000);   ' Note: It won't actually reach this sampling frequency
'SampleCalibrate(14,"V",1,0);
'SampleTitle$(14,"ephys4");
'
'


'Channel 9
'SampleEvent(9,0,2,1000);     'Func SampleEvent(chan%, port%, type%, rate);
'SampleTitle$(9,"TTL1");
'SampleComment$(9, "TTL1: Shutter"); 

'Channel 10
SampleEvent(10,1,2,1000);
SampleTitle$(10,"TTL2");
SampleComment$(10, "TTL2: IR LED"); 

'Channel 11
SampleEvent(11,2,2,1000);     
SampleTitle$(11,"TTL3");
SampleComment$(11, "TTL3: L laser"); 

'Channel 12
'SampleEvent(12,3,2,1000);
'SampleTitle$(12,"TTL4");
'SampleComment$(12, "TTL4: R laser"); 

'Channel 30
SampleTextMark(200);

'Set optimise mode (do this last)
'SampleOptimise(1,1,0,2,50);  '(opt%, grp%, type%, usL%, usH%) OLD
SampleOptimise(2,1,7);  '(opt%, grp%, type%, usL%, usH%) 'EDIT HP 6/9/2017 type is specific to the Power401 mk II

'Continuous sampling
SampleMode(1); 

'Create a spike2 data file and make the new window visible immediately
SampleWindow% := FileNew(0,1);   


SetSequencerValues();

'Hide all
ChanHide(-1);

'Show certain channels in a particular order
'ChanShow(1,2,3,4,5,6,7,8,9,10,11,12,30,31);
'ChanShow(1,2,3,4,5,6,7,8,13, 14,10,11,30,31);
'ChanShow(3,4,5,6,7,8,13, 14,10,11,30,31);
ChanShow(3,4,5,6,7,10,11,30,31);

'ChanSelect(13,1);    'Select channel 13
'ChanOrder(4,1,-3);   'Move selected channels
'-----------------------------------------

'Channel y-range (channel num, low, high)
'YRange( 1, -10, 10 ); 
'YRange( 2, -10, 10 );  
YRange( 3, -10, 10 );  
YRange( 4, -10, 10 );  
YRange( 5, -10, 10 );  
YRange( 6, -10, 10 ); 

YRange( 7, -2, 2 );  
YRange( 8, -2, 2 ); 
YRange( 13, -2, 2 );  
YRange( 14, -2, 2 );   

'ChanWeight(1,.5);           ' Make command channel smaller
'ChanWeight(2,.5);           ' Make command channel smaller

XRange( 0, 20);      ' Set the default X axis time range
End

'--------------------------------------------------------------------------------
' Read in arbitrary stimulus
'--------------------------------------------------------------------------------
Proc ArbitraryStim()

const DACNum% := 2;  ' 0 = drum, 1 = chair, 2, 3
var nSamples% := 0;
var freqHz := 1000;
var fileHandle;

' Select and open input file. Uncomment this line and comment out the FileOpen call below to specify 
' the input file and just open it without the dialog. 


fileHandle := FileOpen(ArbStimFile$, 8, 0); ' Specify input file
'fileHandle := FileOpen("", 8, 0); ' Use dialog
if fileHandle < 0 then
    PrintLog("Error - Cannot open input file.\n");
    halt;
endif

' Read first line: number of samples and frequency
var status% := Read(nSamples%, freqHz);

var velSamples[nSamples%];
var velVoltages[nSamples%];

ArrConst(velSamples[], 0);  ' initialize array with zeros
ArrConst(velVoltages[], 0); ' initialize array with zeros

if status% <> 2 then
    PrintLog("Error - First line of input file should have two (space-separated) values, nSamples and freq(in Hz). Found %d.\n", status%);
    FileClose();
    halt;
endif
PrintLog("Will read %d samples. Sampling frequency: %f Hz\n", nSamples%, freqHz);

' Now read velocity samples
var lineNumber% := 1;
for i% := 0 to nSamples%-2 do ' n-2 so that last sample is zero
    status% := Read(velSamples[i%]);
    lineNumber% := lineNumber% + 1;
    if status% <> 1 then
        PrintLog("Error in input file at line %d: not enough samples (expecting %d)\n", lineNumber%, nSamples%);
        FileClose();
        halt;
    endif
next;

'ArrConst(velVoltages[0:nSamples%-1], velSamples[0:nSamples%-1]);


'velSamples[nSamples%-10:nSamples%-1] := 0;
FileClose();
PrintLog("Done reading input.\n");
var temp := velSamples[nSamples%-1];

' Computation here - convert input samples to voltages between -+5v (PlayWave assumes full range is 5 V)
'ArrConst(velVoltages[], velSamples[]);
'ArrAdd(velVoltages[0:nSamples%-1], ChairDegreesPerSecondOffset);
'ArrMul(velVoltages[], ChairDegreesPerSecond2Voltage); ' Need to divide by 2 to get correct scaling - not sure why
'ArrMul(velVoltages[], .5);


' Computation here - FOR TTL OUTPUT



' Computation here - FOR TTL OUTPUT
ArrConst(velVoltages[], velSamples[]);
ArrMul(velVoltages[], 5);


'Add a waveform to DAC output This MUST be done before calling FileNew(), or before starting sampling. 
status% := PlayWaveAdd("W", "ArbWave", DACNum%, freqHz, velVoltages[]); 'returns size of data in bytes, max is 32 MB
PlayWaveCycles("W", 0); ' Set number of cycles (0 for infinity, 1 default)

if status% < 0 then
    PrintLog("Error in PlayWaveAdd\n");
    halt;
endif



' Make a waveform to test the laser
var velVoltagesTest[2000]; ' Set number of ms per test cycle here
ArrConst(velVoltagesTest[], 0); ' initialize array with zeros
ArrConst(velVoltagesTest[1:100], 1); ' initialize array with zeros

'velVoltagesTest[1:100] := 1; ' turn on pulses for 100 ma to test
'velVoltagesTest[11] := 1; ' turn on pulses for 100 ma to test
'velVoltagesTest[21] := 1; ' turn on pulses for 100 ma to test
'velVoltagesTest[31] := 1; ' turn on pulses for 100 ma to test
'velVoltagesTest[41] := 1; ' turn on pulses for 100 ma to test
'velVoltagesTest[51] := 1; ' turn on pulses for 100 ma to test
'velVoltagesTest[61] := 1; ' turn on pulses for 100 ma to test
'velVoltagesTest[71] := 1; ' turn on pulses for 100 ma to test
'velVoltagesTest[81] := 1; ' turn on pulses for 100 ma to test
'velVoltagesTest[91] := 1; ' turn on pulses for 100 ma to test
'velVoltagesTest[101] := 1; ' turn on pulses for 100 ma to test

ArrMul(velVoltagesTest[], 5);

'Add a waveform to DAC output This MUST be done before calling FileNew(), or before starting sampling. 
status% := PlayWaveAdd("w", "ArbWave", DACNum%, freqHz, velVoltagesTest[]); 'returns size of data in bytes, max is 32 MB
PlayWaveCycles("w", 0); ' Set number of cycles (0 for infinity, 1 default)

End

'--------------------------------------------------------------------------------
'Turn waveform on and off
'--------------------------------------------------------------------------------
Func ToolbarWaveOn%()
SampleKey( "W" );
SampleKey("i"); 'Immediate idle with no offset adjust
Return( 1 );
end



'--------------------------------------------------------------------------------
'Turn test wveform on and off
'--------------------------------------------------------------------------------
Func ToolbarWaveTestOn%()
SampleKey( "w" );
SampleKey("i"); 'Immediate idle with no offset adjust
Return( 1 );
end

'--------------------------------------------------------------------------------
'Configure Step settings window
'--------------------------------------------------------------------------------
Proc StepConfigWindow()
DlgCreate("Step settings"); 'Start new dialog for entering step commands
DlgReal(1,"Total Period (ms)", 0, 15000);
DlgReal(2,"Step length (ms)", 0, 15000);
DlgReal(3,"Chair Velocity (deg/sec)", -100, 100);
DlgReal(4,"Drum Velocity (deg/sec)", -100, 100);
DlgCheck(5,"Stimulate");
DlgReal(6, "Pulse duration (ms)", 0, 5000);
DlgReal(7, "Interpulse interval (ms)", 0, 5000);
DlgCheck(8, "Light");
DlgReal(9, "Light duration (ms)", 0, 5000);
DlgReal(10, "Start time rel. step", 0, 5000);
End


'--------------------------------------------------------------------------------
' Toolbar Callbacks
'--------------------------------------------------------------------------------
Func ToolbarIdle%()
'This function calls repeatedly whenever nothing else is happening
'if runExmpt=1, it is used to run a full expmt automatically.  -HP
'expmtMode: 0=habit, 1=0x, 2=2x, 3=ipsi stim, 4=contra stim
'test: 0=wait, 1=test, 2=train
' Check a valid sampling view is running
var currView := ViewKind();
if  currView <> 0 then 
    return 1;
endif;


' Keep sine wave from drifting!!!
if MaxTime() > (prevTime + 1/sinHzChair) then
    prevTime := MaxTime();
    ' Measure slope from last cycle of chair/drum position feedback
    var hhposSlope := ChanValue(hhposCh%, prevTime) - ChanValue(hhposCh%, prevTime-(1/sinHzChair));
    var htposSlope := ChanValue(htposCh%, prevTime) - ChanValue(htposCh%, prevTime-(1/sinHzDrum));
    var hhposPos := ChanMeasure(hhposCh%, 2, prevTime-(1/sinHzChair), prevTime);
    var htposPos := ChanMeasure(htposCh%, 2, prevTime-(1/sinHzDrum), prevTime);   
    
    ChairDegreesPerSecondOffset :=  -hhposSlope/4  - hhposPos/4;  
    DrumDegreesPerSecondOffset :=  -htposSlope/4 - htposPos/4;       
    SetSequencerValues();    
endif;


Return(1);
End



' Flash light to alert animal

Proc runFlash()   ' Takes .2 s total
if flashon% = 1 then  
    ToolbarLightOn%();   
endif;
Yield(.2);
ToolbarLightOff%();
end;

  ' Quit the data collection
Func ToolbarQuit%()
SampleKey( "O" );
Return( 0 );
End

' Initialize chair and drum (bring back to zero position)
Func ToolbarInit%()
'ToolbarLightOff%(); Yield(.01);
'ToolbarSineStop%(); Yield(.01);
PlayWaveStop(); 'In case any wave playing
SampleKey( "I" );
Return( 1 );
End

'--------------------------------------------------------------------------------
'Turn sine wave on/off
'--------------------------------------------------------------------------------
Func ToolbarSineStart%()
SampleKey( "S" );
sineOn% := 1;
prevTime := MaxTime();
Yield();
ToolbarSet(SinePos, "Sine Off",ToolbarSineStop%);
Return( 1 );
End

Func ToolbarSineStop%()
SampleKey( "s" );
sineOn% := 0;
ToolbarSet(SinePos, "Sine On",ToolbarSineStart%);
Return( 1 );
End

'--------------------------------------------------------------------------------
'Configure Sine settings window
'--------------------------------------------------------------------------------
Func ToolbarSineConfig%()
DlgCreate("Sine settings");  'Start new dialog
DlgReal(1,"Chair Freq (Hz)",0,50);
DlgReal(2,"Chair Peak Velocity (deg/sec)",0,100);    'set to 0 if not using Chair
DlgReal(3,"Chair Phase (degree)",-180,180);
DlgReal(4,"Drum Freq (Hz)",0,50);
DlgReal(5,"Drum Peak Velocity (deg/sec)",0,100);   'set to 0 if not using Drum
DlgReal(6,"Drum Phase (degree)",-180,180);
DlgShow(sinHzChair,sinAmpChair, sinPhChair, sinHzDrum, sinAmpDrum,  sinPhDrum);

SetPulseSettings%()

SetSequencerValues();
Return(1);
End


'--------------------------------------------------------------------------------
'Comment
'--------------------------------------------------------------------------------
Func ToolbarComment%()
DlgCreate("Comment"); 'Start new dialog for entering comments
DlgString(1,"Comment",200);
DlgShow(comment$);
SampleText(comment$);
Return(1);
End


'--------------------------------------------------------------------------------
'Turn light on/off
'--------------------------------------------------------------------------------
Func ToolbarLightOn%()
SampleKey( "L" );
Toolbarset(LightPos,"Light Off", ToolbarLightOff%);
Return( 1 );
end

Func ToolbarLightOff%()
SampleKey( "l" );
Toolbarset(LightPos,"Light On", ToolbarLightOn%);
Return( 1 );
end



'--------------------------------------------------------------------------------
'Turn both lasers on/off
'--------------------------------------------------------------------------------
Func ToolbarLasersOn%()
SampleKey( "Z" );
Toolbarset(LaserPos,"Lasers Off", ToolbarLasersOff%);
Return( 1 );
end

Func ToolbarLasersOff%()
SampleKey( "z" );
Toolbarset(LaserPos,"Lasers On", ToolbarLasersOn%);
Return( 1 );
end


'--------------------------------------------------------------------------------
'Start sine wave/pulses for video
'--------------------------------------------------------------------------------
Func ToolbarVidOn%()
pulseDurationV := 33; 'For video alignment pulse
pulseWaitV := 1000*1/sinHzChair - pulseDurationV - 5;    'For video alignment
SetSequencerValues();
SampleKey( "V" );
Toolbarset(VidPos,"Video Off", ToolbarVidOff%);
Return( 1 );
end

Func ToolbarVidOff%()
SampleKey( "v" );
Toolbarset(VidPos,"Video On", ToolbarVidOn%);
Return( 1 );
end


'--------------------------------------------------------------------------------
'Configure Pulse settings window
'--------------------------------------------------------------------------------
Func ToolbarPulseConfig%()
DlgCreate("Pulse settings");  'Start new dialog
'DlgReal(1,"Period (ms)",0,300000);   
DlgReal(1,"Number of Pulses",0,1000);
DlgReal(2,"Pulse duration (ms)",0,5000);
DlgReal(3,"Interpulse interval (ms)",0,5000); 
DlgReal(4,"Pulse phase (deg)",0,360);
DlgShow(pNumber, pulseDuration, pulseInterval,pulsePhase);
SetPulseSettings%()
Return( 1 );
End


'--------------------------------------------------------------------------------
'Calculate Pulse settings and send to sequencer
'--------------------------------------------------------------------------------
Func SetPulseSettings%()
pulsePeriod := 1/sinHzChair * 1000;
fullPulse := 0;
pWait := (pulsePeriod/2) - 4 - (pNumber *(pulseDuration + pulseInterval+1));

if pWait < 0 then
    pWait := 0 ;
    fullPulse := 1; 'Immediate switching between states
endif;
pDuration := pulseDuration -2;
pWait2 := pWait-2;
pInterval := pulseInterval;
if pInterval > 1 then
    pInterval := pulseInterval -3;
endif;
SetSequencerValues();

Return(1);
End;

'--------------------------------------------------------------------------------
'Configure Step settings window
'--------------------------------------------------------------------------------
Func ToolbarStepConfig%()
StepConfigWindow();
DlgShow(stepPeriod, stepLength, stepAmpChair, stepAmpDrum, stepStim, pulseDuration, pulseInterval, stepLight, lightDur, lightStart);
sRest1 := (stepPeriod  - stepLength - stepLength)/2 - 3;
sLength := stepLength - 3;
sRest2 := sRest1 - 1;
sAmpChair := ChairVel2Int32%( stepAmpChair );
sAmpChairN := 0-sAmpChair;
sAmpDrum := DrumVel2Int32%( stepAmpDrum );
sAmpDrumN := 0-sAmpDrum;

if stepLight = 1 then
    'sLength := sLength -20 ;
    'sRest1 := sRest1 - 20;
endif;

if stepStim = 1 then
	pNumber := trunc((stepLength-4)/(pulseDuration + pulseInterval));
	pDuration := pulseDuration -2;
	pInterval := pulseInterval -3;
	sLength1 := stepLength - ((pulseDuration + pulseInterval)*pNumber)-4;
endif;

SetSequencerValues();
Return (1);
End


'--------------------------------------------------------------------------------
'Turn steps on/off
'--------------------------------------------------------------------------------
Func ToolbarStepOn%()
if (stepStim = 0) and (stepLight = 0) then
	SampleKey ( "T" );
	ToolbarSet(StepPos, "Step Stop", ToolbarStepOff%);    
else    
    if stepLight = 1 then
        SampleKey ("t");       
        ToolbarSet(StepPos, "Step Stop", ToolbarStepOff%);
    endif;
    if stepStim = 1 then
        SampleKey ( "u");      '***Currently non functional 8/2/12?
        ToolbarSet(StepPos, "Step Stop", ToolbarStepOff%);
    endif;
endif;
Return (1);
End

Func ToolbarStepOff%()
SampleKey( "I" );
ToolbarSet(StepPos, "Step Start", ToolbarStepOn%);
Return( 1 );
End


'--------------------------------------------------------------------------------
'Turn stim pulses on/off
'--------------------------------------------------------------------------------
Func ToolbarStimOn%()
if fullPulse = 1 then
    SampleKey( "Q" );
else 
    SampleKey("P");
endif;
sineOn% := 1;
Yield();
Toolbarset(PulsePos,"Pulse Off", ToolbarStimOff%);
Return( 1 );
end

Func ToolbarStimOff%()
SampleKey( "p" );
Yield();
SampleKey( "I" );
Yield();
sineOn% := 0;

Toolbarset(PulsePos,"Pulse On", ToolbarStimOn%);
Return( 1 );
end


'--------------------------------------------------------------------------------
'New file
'--------------------------------------------------------------------------------
Func ToolbarNew%()
WindowConfig();
Return (1);
End


Proc SetSequencerValues()
actualChairPh := ((sinPhChair + pulsePhase + 180) mod 360) - 180;
actualDrumPh  := ((sinPhDrum  + pulsePhase + 180) mod 360) - 180;

'Chair parameters
SampleSeqVar( 23, ChairAmp2Int32%( ChairDegreesPerSecondOffset ) );
SampleSeqVar( 27, ChairAmp2Int16%( sinAmpChair ) );
SampleSeqVar( 28, Angle2Int32%( actualChairPh ) );
SampleSeqVar( 29, Hz2Int32%( sinHzChair ) );

'Drum parameters
SampleSeqVar( 22, DrumAmp2Int32%( DrumDegreesPerSecondOffset ) );
SampleSeqVar( 24, DrumAmp2Int16%( sinAmpDrum ) );
SampleSeqVar( 25, Angle2Int32%( actualDrumPh ) );
SampleSeqVar( 26, Hz2Int32%( sinHzDrum ) );

'Pulse parameters
SampleSeqVar( 33, pWait );
SampleSeqVar( 34, pNumber );
SampleSeqVar( 35, pDuration);
SampleSeqVar( 36, pInterval);
SampleSeqVar( 37, pStart);

'Step parameters
SampleSeqVar( 38, sRest2);
SampleSeqVar( 39, sStart);
SampleSeqVar( 40, sLength);
SampleSeqVar( 41, sLength1);
SampleSeqVar( 42, sRest1);
SampleSeqVar( 43, sAmpChair);
SampleSeqVar( 44, sAmpDrum);
SampleSeqVar( 45, sAmpChairN);
SampleSeqVar( 46, sAmpDrumN);
'SampleSeqVar( 47, LighStar);
'SampleSeqVar( 48, LighDur);

SampleSeqVar( 50, pulseDurationV);
SampleSeqVar( 51, pulseWaitV);
SampleSeqVar( 52, pulsePeriod);


End	

'--------------------------------------------------------------------------------
' Conversion functions
'--------------------------------------------------------------------------------

' Angles in the range [-180,180] should span [-2147483648.0,2147483647.0]
Func Angle2Int32%( angle )
Return( angle * 2147483647.0 / 180 );
End

' Rates are calculated in degrees per sequencer step, with one degree being 11930465.
Func Hz2Int32%( hz )
' This assumes a sequencer rate of 1 kHz.
Return( hz * 11930465 * 360 / 1000 );
End

' Amplitudes must be converted such that [ 0, 32768 ] spans the positive range of the dac, e.g. [0, 5 ]
' We have to include the dac maximum and the degrees-per-second-to-voltage conversion factor. Does not include offset.
Func ChairAmp2Int16%( amp )
Return( amp * ChairDegreesPerSecond2Voltage * 32768 / MaxVoltage  ) ;
End

Func DrumAmp2Int16%( amp )
Return( amp * DrumDegreesPerSecond2Voltage * 32768 / MaxVoltage  )  ;
End

Func ChairAmp2Int32%( amp )
Return( amp * ChairDegreesPerSecond2Voltage * 2147483647 / MaxVoltage  ) ;
End

Func DrumAmp2Int32%( amp )
Return( amp * DrumDegreesPerSecond2Voltage * 2147483647 / MaxVoltage  )  ;
End


' Command velocities must be converted such that [ 0, 2147483647 ] spans the positive range of the dac, e.g. [0, 5 ]
' We have to include the dac maximum and the degrees-per-second-to-voltage conversion factor.
Func ChairVel2Int32%( amp )
Return(  (amp + ChairDegreesPerSecondOffset) * ChairDegreesPerSecond2Voltage* 2147483647 / MaxVoltage  );
End

Func DrumVel2Int32%( amp )
Return( (amp + DrumDegreesPerSecondOffset) * DrumDegreesPerSecond2Voltage * 2147483647 / MaxVoltage  );
End
