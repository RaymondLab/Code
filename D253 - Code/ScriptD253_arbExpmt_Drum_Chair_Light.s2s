' New mouse-rig script
' Drew Haven
' Barbara Nguyen-Vu
' Soon-Lim Shin
' Hannah Payne
' Started script: 2008-12-05
'  04/06/12 add step light by BN, GZ
'  07/24/12 updated and debugged by Hannah Payne
'  10/31/12 Edited to test mag sensor on channel 7 (formerly ephsy)
'  8/16/2016 Edited to accept aribtrary experiment inputs with 3 columns: Chair, Drum, Light by HP


'--------------------------------------------------------------------------------
' Defining Global variables
'--------------------------------------------------------------------------------

var SampleWindow%;
var SequencerFile$ := "C:\\Users\\Public\\code\\SeqHP070915.pls";
var ArbStimFile$ := "C:\\Users\\Public\\Code\\experiments\\step_test_Late_600ms_20161219.txt"; ' FOR TEsting VOR stim


var nReps% := 1; '***


var sinAmpChair := 10;
var sinHzChair := 1;
var sinPhChair := -90;  'Convert cos to sin
var sinAmpDrum := 10;
var sinHzDrum := 1;
var sinPhDrum := 90;
var actualChairPh;
var actualDrumPh;

var MaxVoltage := 10; '*** HP 1/10/14 +-10 V voltage range: check in Edit -> Edit Parameters

var stepPeriod := 2000; 'initializing variables for step commands
var stepLength := 500;
var sWait :=500-3;
var stepAmpChair := 10;
var stepAmpDrum := 10;
var stepStim :=0;

var sStart;
var sLength;
var sLength1;
var sRest1;
var sRest2;
var sAmpChair;
var sAmpDrum;
var sAmpChairN;
var sAmpDrumN;

var pulsePeriod := 1000;
var pNumber := 1;
var pulseDuration := 500;
var pulseInterval := 0;
var pulseStart :=0;
var pWait :=0;
var pWait2 :=0;
var pulseDurationV := 33; 'For video alignment pulse - duration
var pulseWaitV := 1000 - pulseDurationV - 5;    'For video alignment pulse - time between pulses
var pDuration;
var pInterval;
var pStart;
var pulsePhase := 0 ;
var stepLight :=0;
var lightDur :=500;
var lightStart :=0;
var comment$;
var fullPulse :=0;
var i%;
var j%;

'Chair converstion factors
var ChairDegreesPerSecond2Voltage := 0.0098255; 'Chair velocity to voltage (Scale)  * Doubled after fixing scaling (10 V MaxVoltage) 12/10/15 HP
var ChairDegreesPerSecondOffset :=  -.1;         'Chair velocity to voltage (offset)  *** Input default Chair offset here

'Drum conversion factors
var DrumDegreesPerSecond2Voltage := 0.005;      'Drum velocity to voltage (Scale) ***changed from 0.01 HP 3/3/16 0.00474692624
var DrumDegreesPerSecondOffset := -.1;        'Drum velocity to voltage (offset)   *** Input default Drum offset here

'Channel 1: Scaling to display the drum COMMAND signal
var DrumVoltage2Velocity := -1/DrumDegreesPerSecond2Voltage;                'Voltage to Drum Velocity (Scale)
var DrumVoltage2VelocityC := 0;                 'Voltage to Drum Velocity (offset)

'Channel 2: Scaling to display the chair COMMAND signal
var ChairVoltage2Velocity := -1/ChairDegreesPerSecond2Voltage; '107.42869;         'Voltage to Chair Velocity (Scale)     HP 1/10/14
var ChairVoltage2VelocityC := 0;                'Voltage to Chair Velocity (offset)


'Chair velocity readout
var ChairVelReadoutScale := 100.2;             '%*** Updated D253 12/10/15  'arbitary number; changed from 100.2 to 50.2 date_02072018_PragnaGaddam
var ChairVelReadoutOffset := 0;

'Chair position readout
var ChairPosReadoutScale := -18.07;              'Voltage to Chair Position (Scale)
var ChairPosReadoutOffset := 0;                 'Voltage to Chair Position (offset)

'Drum velocity readout
var DrumVelReadoutScale := 10;                   '%*** 103.18 2/3/14 , 296.691885 3/3/16
var DrumVelReadoutOffset := 0;

'Scaling for drum position readout
var DrumPosReadoutScale := 37.39;               'Drum position readout scale (~100 deg/10V) 1/10/14 changed from 20 3/3/16 HP
var DrumPosReadoutOffset := 0;                  'Drum position readout offset




'Channel 5/6: Eye position readout
var EyeVoltage2Position := 1;                   'Voltage to Eye Position (Scale)  %*** 20 HP 6/3
var EyeVoltage2PositionC := 0;                  'Voltage to Eye Position (offset)


var htvelChan%; 'Channel for getting velocity from drum position
var hhvelChan%; 'Channel for getting velocity from chair position

var hevelChan1%; 'Channel for getting eye velocity from magenetic eye position
var hevelChan2%; 'Channel for getting eye velocity from magenetic sensor eye pos

var hepos%;       ' calculated eye pos
var hevel%;       ' calculated eye vel
var Offset1% := 0;
var Offset2% := 0;
var prevTime := 0;
var runExpmt% := 0;
var currTime := 0;
var initTime := 0;
var currTimeInd% := 0;
var sineOn%;
var nSamples% := 1;
var dataChair[1];
var dataLight[1];
var dataDrum[1];
var dataLaserL[1];
var dataLaserR[1];


var chs%[1];
var resetInit% := 1;
var drumOn% := 0;
var dataFreq := 1000;
var errPropChair := 0;
var errPropDrum  := 0;
var errIntChair  := 0;
var errIntDrum   := 0;

'Order of toolbar buttons
const NewFilePos        := 2;
const InitPos           := NewFilePos+1;
const CommentPos        := InitPos+1;
'const OffsetPos         := CommentPos+1;
'const OffsetAutoPos     := OffsetPos+1;
const LightPos          := CommentPos+1;
const LaserPos          := LightPos+1;
const SinePos           := LaserPos+1;
const SineConfigPos     := SinePos+1;
const PulsePos          := SineConfigPos+1;
const PulseConfigPos    := PulsePos+1;
const VidPos            := PulseConfigPos+1;
const ExpmtPos          := PulseConfigPos+1;
const ExpmtConfigPos    := ExpmtPos+1;
const WavePos           := ExpmtPos+1;

' Order of channels
const HTVELCh% := 1;
const HHVELCh% := 2;
const htposCh% := 3;
const hhposCh% := 4;

'--------------------------------------

'--------------------------------------------------------------------------------
' MAIN PROGRAM
'--------------------------------------------------------------------------------
ToolbarConfig();

'--------------------------------------------------------------------------------
'Configure the Toolbar
'--------------------------------------------------------------------------------
Proc ToolbarConfig()
ToolbarClear();     'Remove any old buttons

ToolbarSet(0, "Idle",ToolbarIdle%);
ToolbarSet(1, "Quit",  ToolbarQuit%);
ToolbarSet(InitPos, "Init", ToolbarInit%);
ToolbarSet(LightPos, "Light On", ToolbarLightOn%);
ToolbarSet(LaserPos, "Lasers On", ToolbarLasersOn%);
ToolbarSet(SinePos, "Sine On", ToolbarSineStart%);
ToolbarSet(SineConfigPos, "Sine Config", ToolbarSineConfig%);
ToolbarSet(PulseConfigPos, "Pulse Config", ToolbarPulseConfig%);
ToolbarSet(PulsePos, "Pulse On", ToolbarStimOn%);
ToolbarSet(VidPos, "Video On", ToolbarVidOn%);
ToolbarSet(WavePos,"Play Wave",ToolbarWaveOn%);
ToolbarSet(ExpmtPos, "Run Expmt", ToolbarRunExpmt%);
ToolbarSet(CommentPos, "Comment", ToolbarComment%);
ToolbarSet(NewFilePos, "New File", ToolbarNew%);
Toolbar("", 231);

End

'--------------------------------------------------------------------------------
' Set up channels and make window
'--------------------------------------------------------------------------------
Proc WindowConfig()

SampleClear(); 'Set the sampling configuration to a standard state
ArbitraryStim(); ' Load any arbitrary waveforms to play

'sequencer setup - returns zero if OK
var err%; err% := SampleSequencer( SequencerFile$ );
if err%<0 then
	Message(Print$("I can't find your Sequencer File:%s",Error$(err%)));
	halt
endif

'Channel 1
SampleWaveform(1,0,1000);  'Channel= 1, port= 0, ideal sampling rate= 1000 Hz
SampleCalibrate(1,"deg/s", DrumVoltage2Velocity, DrumVoltage2VelocityC);
SampleTitle$(1,"HTVEL");
SampleComment$(1, "Velocity Signal sent to drum");

'Channel 2
SampleWaveform(HHVELCh%,1,1000);
SampleCalibrate( HHVELCh%, "deg/s", ChairVoltage2Velocity, ChairVoltage2VelocityC);
SampleTitle$(HHVELCh%,"HHVEL");
SampleComment$(HHVELCh%, "Velocity Signal sent to chair");

'Channel 3
SampleWaveform(htposCh%,2,1000);
SampleCalibrate(htposCh%, "deg", DrumPosReadoutScale, DrumPosReadoutOffset);
SampleTitle$(htposCh%,"htpos");
SampleComment$(htposCh%, "Drum Position");

'Channel 4
SampleWaveform(hhposCh%,3,1000);
SampleCalibrate(hhposCh%,"deg", ChairPosReadoutScale, ChairPosReadoutOffset);
SampleTitle$(hhposCh%,"hhpos");
SampleComment$(hhposCh%, "Chair Position");

'Channel 5
SampleWaveform(5,4,1000);
SampleCalibrate(5,"V",EyeVoltage2Position,EyeVoltage2PositionC);
SampleTitle$(5,"hepos1");
SampleComment$(5, "Eye Position 1");

'Channel 6
SampleWaveform(6,5,1000);
SampleCalibrate(6,"V", EyeVoltage2Position,EyeVoltage2PositionC);
SampleTitle$(6,"hepos2");
SampleComment$(6, "Eye Position 2");




'Channel 8
SampleWaveform(8,7,1000);
SampleCalibrate(8,"deg/s",ChairVelReadoutScale,ChairVelReadoutOffset);
SampleTitle$(8,"hhvel");
SampleComment$(8, "Chair velocity");

'Channel 13
SampleWaveform(13,8,1000);
SampleCalibrate(13,"deg/s",DrumVelReadoutScale,DrumVelReadoutOffset);
SampleTitle$(13,"htvel");
SampleComment$(13, "Drum velocity");



'Channel 9
SampleEvent(9,0,2,1000);     'Func SampleEvent(chan%, port%, type%, rate);
SampleTitle$(9,"TTL1");
SampleComment$(9, "TTL1: Shutter");

'Channel 10
SampleEvent(10,1,2,1000);
SampleTitle$(10,"TTL2");
SampleComment$(10, "TTL2: IR LED");

'Channel 11
SampleEvent(11,2,2,1000);
SampleTitle$(11,"TTL3");
SampleComment$(11, "TTL3: L laser");

'Channel 12
SampleEvent(12,3,2,1000);
SampleTitle$(12,"TTL4");
SampleComment$(12, "TTL4: R laser");



'Channel 30
SampleTextMark(200);

'Set optimise mode (do this last)
SampleOptimise(1,1,0,2,50);

'Continuous sampling
SampleMode(1);

'Create a spike2 data file and make the new window visible immediately
SampleWindow% := FileNew(0,1);


ChanPenWidth(1,2);
ChanPenWidth(2,2);
SetSequencerValues();

' Set colors
' Default: black
for i% := 1 to 15    do
    'ChanColourSet(i%, 1, 0, 0, 0);
next;


' blue: eye
ChanColourSet(5, 1, 0, 0, 1);
ChanColourSet(6, 1, 0, 0, 1);

'Hide all
ChanHide(-1);

'Show certain channels in a particular order
'ChanShow(1,2,3,4,5,6,7,8,9,10,11,12,30,31);
'ChanShow(1,2,3,4,5,6,7,8,9,10,11,12,30,31);
ChanShow(1,2,3,4,5,6,7,8,13, 9,10,11,12,30,31);

'ChanSelect(13,1);    'Select channel 13
'ChanOrder(4,1,-3);   'Move selected channels
'-----------------------------------------

'Channel y-range (channel num, low, high)
YRange( 1, -10, 10 );
YRange( 2, -10, 10 );
YRange( 3, -10, 10 );
YRange( 4, -10, 10 );
YRange( 5, -10, 10 );
YRange( 6, -10, 10 );
YRange( 13, 0, 360 );
YRange( 14, 0, 360 );
YRange( 15, 0, 360 );

ChanWeight(1,.5);           ' Make command channel smaller
ChanWeight(2,.5);           ' Make command channel smaller

XRange(0, 20);      ' Set the default X axis time range
End

'--------------------------------------------------------------------------------
' Read in arbitrary stimulus
'--------------------------------------------------------------------------------
Proc ArbitraryStim()

'---------------ADD ARBITRARY STIM FROM FILE------------------------
var nChans%;
var fileHandle;

' Open input file. Uncomment this line and comment out the FileOpen call below to specify
' the input file and just open it without the dialog.
'fileHandle := FileOpen(ArbStimFile$, 8, 0); ' Specify input file
fileHandle := FileOpen("", 8, 0); ' Use dialog

' Read first line: number of samples and frequency and number of columns
var status% := Read(nSamples%, dataFreq, nChans%);
if status% <> 3 then
    PrintLog("Error - First line of input file should have three (space-separated) values, nSamples freq(in Hz), nChans. Found %d.\n", status%);
    FileClose();   halt;
endif
PrintLog("Will read %d samples. Sampling frequency: %f Hz\n", nSamples%, dataFreq);

' Init arrays
var stimSamples[nSamples%][nChans%]; ' initialize array with zeros

' Now read velocity samples
for i% := 0 to nSamples%-1 do
     status% := Read(stimSamples[i%][]);
next;
if status% < 0 then
     PrintLog("Error in reading data\n");
    halt;
endif
FileClose();
PrintLog("Done reading input.\n");

resize dataDrum[nSamples%];     'Global
resize dataChair[nSamples%];    'Global
resize dataLight[nSamples%];    'Global

ArrConst(dataDrum[], stimSamples[][0]);
ArrConst(dataChair[], stimSamples[][1]);
ArrConst(dataLight[], stimSamples[][2]);

' Computation here - convert input samples to voltages between -+5v (PlayWave assumes full range is 5 V)
ArrMul(dataChair[], .1); 'Input was multiplied by 10
ArrMul(dataDrum[], .1);  'Input was multiplied by 10

' Determine if drum is in use: drumOn should be zero if no drum activity
var maxInd% := max(dataDrum);
drumOn% := round(dataDrum[maxInd%]);

' Computation here - FOR TTL OUTPUT
ArrMul(dataLight[], 5);

'Specify which ADC channels to output each column of arbitray signal to
  resize chs%[nChans%];
chs%[0] := 0; 'Drum/R laser
chs%[1] := 1; 'Chair
chs%[2] := 3; 'Light flash


'Add waveforms to DAC output - reserve space
PlayWaveAdd("W", "ArbWave", chs%[], dataFreq, nSamples%);
PlayWaveCycles("W",nReps%); ' repeat if specified

End


'--------------------------------------------------------------------------------
' Toolbar Callbacks
'--------------------------------------------------------------------------------
Func ToolbarIdle%()
'This function calls repeatedly whenever nothing else is happening

' Check a valid sampling view is running
if  ViewKind() <> 0 then
    return 1;
endif;


Return(1);
End


' Quit the data collection
Func ToolbarQuit%()
SampleKey( "O" );
Return( 0 );
End

' Initialize chair and drum (bring back to zero position)
Func ToolbarInit%()
PlayWaveStop(); 'In case any wave playing
prevTime := 0;  ' Reset prev time so sine offset code continues running in a new file
ToolbarLightOff%();
ToolbarSineStop%();
SampleKey( "I" );
errIntChair := 0;
errIntDrum := 0;
Return( 1 );
End

Func ToolbarRunExpmt%()




             ' Update playwave waveform with new offset
  var stimVoltages[nSamples%][3];
  var dataDrum2[nSamples%];
  var dataChair2[nSamples%];
  ArrConst(dataDrum2[], dataDrum[]);
  ArrConst(dataChair2[], dataChair[]);
  ArrAdd(dataChair2[], ChairDegreesPerSecondOffset);
  ArrAdd(dataDrum2[], DrumDegreesPerSecondOffset);
  ArrMul(dataChair2[], ChairDegreesPerSecond2Voltage/2); ' Need to divide by 2, not sure why
  ArrMul(dataDrum2[], DrumDegreesPerSecond2Voltage/2);

  ' Select channels
      ArrConst(stimVoltages[][0], dataDrum2[]);
      ArrConst(stimVoltages[][1], dataChair2[]);
      ArrConst(stimVoltages[][2], dataLight[]);


  'Add waveforms to DAC output
  PlayWaveCopy("W", stimVoltages[][]);
  PlayWaveCycles("W",nReps%); ' repeat 5 times


SampleKey( "W" ); ' Play wave
runExpmt% := 1;
'errIntChair := 0;
'errIntDrum := 0;
initTime := MaxTime();
ToolbarSet(ExpmtPos, "Quit Expmt",ToolbarQuitExpmt%);
Return(1);
End

Func ToolbarQuitExpmt%()
ToolbarInit%();
ToolbarSet(ExpmtPos, "Run Expmt",ToolbarRunExpmt%);
runExpmt% := 0;
Return(1)
end

'--------------------------------------------------------------------------------
'Turn waveform on and off
'--------------------------------------------------------------------------------
Func ToolbarWaveOn%()
SampleKey( "W" );
ToolbarSet(WavePos, "Wave off",ToolbarWaveOff%);
Return( 1 );
end

Func ToolbarWaveOff%()
ToolbarInit%();
ToolbarSet(WavePos, "Wave On",ToolbarWaveOn%);
Return( 1 );
End

'--------------------------------------------------------------------------------
'Turn sine wave on/off
'--------------------------------------------------------------------------------
Func ToolbarSineStart%()
SampleKey( "S" );
prevTime := MaxTime();
sineOn% := 1;
Yield();
ToolbarSet(SinePos, "Sine Off",ToolbarSineStop%);
Return( 1 );
End

Func ToolbarSineStop%()
SampleKey( "s" );
sineOn% := 0;
ToolbarSet(SinePos, "Sine On",ToolbarSineStart%);
Return( 1 );
End

'--------------------------------------------------------------------------------
'Configure Sine settings window
'--------------------------------------------------------------------------------
Func ToolbarSineConfig%()
DlgCreate("Sine settings");  'Start new dialog
DlgReal(1,"Chair Freq (Hz)",0,50);
DlgReal(2,"Chair Peak Velocity (deg/sec)",0,100);    'set to 0 if not using Chair
DlgReal(3,"Chair Phase (degree)",-180,180);
DlgReal(4,"Drum Freq (Hz)",0,50);
DlgReal(5,"Drum Peak Velocity (deg/sec)",0,100);   'set to 0 if not using Drum
DlgReal(6,"Drum Phase (degree)",-180,180);
DlgShow(sinHzChair,sinAmpChair, sinPhChair, sinHzDrum, sinAmpDrum,  sinPhDrum);


SetSequencerValues();
Return(1);
End


'--------------------------------------------------------------------------------
'Comment
'--------------------------------------------------------------------------------
Func ToolbarComment%()
DlgCreate("Comment"); 'Start new dialog for entering comments
DlgString(1,"Comment",200);
DlgShow(comment$);
SampleText(comment$);
Return(1);
End


'--------------------------------------------------------------------------------
'Turn light on/off
'--------------------------------------------------------------------------------
Func ToolbarLightOn%()
SampleKey( "L" );
Toolbarset(LightPos,"Light Off", ToolbarLightOff%);
Return( 1 );
end

Func ToolbarLightOff%()
SampleKey( "l" );
Toolbarset(LightPos,"Light On", ToolbarLightOn%);
Return( 1 );
end



'--------------------------------------------------------------------------------
'Turn both lasers on/off
'--------------------------------------------------------------------------------
Func ToolbarLasersOn%()
'SampleKey( "Z" );
SampleKey("H");
Toolbarset(LaserPos,"Lasers Off", ToolbarLasersOff%);
Return( 1 );
end

Func ToolbarLasersOff%()
'SampleKey( "z" );
PlayWaveStop();
ToolbarInit%();

Toolbarset(LaserPos,"Lasers On", ToolbarLasersOn%);
Return( 1 );
end


'--------------------------------------------------------------------------------
'Start sine wave/pulses for video
'--------------------------------------------------------------------------------
Func ToolbarVidOn%()
pulseDurationV := 33; 'For video alignment pulse
pulseWaitV := 1000*1/sinHzChair - pulseDurationV - 5;    'For video alignment
SetSequencerValues();
SampleKey( "V" );
Toolbarset(VidPos,"Video Off", ToolbarVidOff%);
Return( 1 );
end

Func ToolbarVidOff%()
SampleKey( "v" );
Toolbarset(VidPos,"Video On", ToolbarVidOn%);
Return( 1 );
end


'--------------------------------------------------------------------------------
'Configure Pulse settings window
'--------------------------------------------------------------------------------
Func ToolbarPulseConfig%()
DlgCreate("Pulse settings");  'Start new dialog
'DlgReal(1,"Period (ms)",0,300000);
DlgReal(1,"Number of Pulses",0,1000);
DlgReal(2,"Pulse duration (ms)",0,5000);
DlgReal(3,"Interpulse interval (ms)",0,5000);
DlgReal(4,"Pulse phase (deg)",0,360);
DlgShow(pNumber, pulseDuration, pulseInterval,pulsePhase);
SetPulseSettings%();
Return( 1 );
End


'--------------------------------------------------------------------------------
'Calculate Pulse settings and send to sequencer
'--------------------------------------------------------------------------------
Func SetPulseSettings%()
pulsePeriod := 1/sinHzChair * 1000;
fullPulse := 0;
pWait := (pulsePeriod/2) - 4 - (pNumber *(pulseDuration + pulseInterval+1));

if pWait < 0 then
    pWait := 0 ;
    fullPulse := 1; 'Immediate switching between states
endif;
pDuration := pulseDuration -2;
pWait2 := pWait-2;
pInterval := pulseInterval;
if pInterval > 1 then
    pInterval := pulseInterval -3;
endif;
SetSequencerValues();

Return(1);
End;


'--------------------------------------------------------------------------------
'Turn stim pulses on/off
'--------------------------------------------------------------------------------
Func ToolbarStimOn%()
if fullPulse = 1 then
    SampleKey( "Q" );
else
    SampleKey("P");
endif;
Yield();
Toolbarset(PulsePos,"Pulse Off", ToolbarStimOff%);
Return( 1 );
end

Func ToolbarStimOff%()
SampleKey( "p" );
Yield();
SampleKey( "I" );
Yield();

Toolbarset(PulsePos,"Pulse On", ToolbarStimOn%);
Return( 1 );
end


'--------------------------------------------------------------------------------
'New file
'--------------------------------------------------------------------------------
Func ToolbarNew%()
WindowConfig();
Return (1);
End


Proc SetSequencerValues()
actualChairPh := ((sinPhChair + pulsePhase + 180) mod 360) - 180;
actualDrumPh  := ((sinPhDrum  + pulsePhase + 180) mod 360) - 180;

'Chair parameters
SampleSeqVar( 23, ChairAmp2Int32%( ChairDegreesPerSecondOffset ) );
SampleSeqVar( 27, ChairAmp2Int16%( sinAmpChair ) );
SampleSeqVar( 28, Angle2Int32%( actualChairPh ) );
SampleSeqVar( 29, Hz2Int32%( sinHzChair ) );

'Drum parameters
SampleSeqVar( 22, DrumAmp2Int32%( DrumDegreesPerSecondOffset ) );
SampleSeqVar( 24, DrumAmp2Int16%( sinAmpDrum ) );
SampleSeqVar( 25, Angle2Int32%( actualDrumPh ) );
SampleSeqVar( 26, Hz2Int32%( sinHzDrum ) );

'Pulse parameters
SampleSeqVar( 33, pWait );
SampleSeqVar( 34, pNumber );
SampleSeqVar( 35, pDuration);
SampleSeqVar( 36, pInterval);
SampleSeqVar( 37, pStart);

'Step parameters
SampleSeqVar( 38, sRest2);
SampleSeqVar( 39, sStart);
SampleSeqVar( 40, sLength);
SampleSeqVar( 41, sLength1);
SampleSeqVar( 42, sRest1);
SampleSeqVar( 43, sAmpChair);
SampleSeqVar( 44, sAmpDrum);
SampleSeqVar( 45, sAmpChairN);
SampleSeqVar( 46, sAmpDrumN);
'SampleSeqVar( 47, LighStar);
'SampleSeqVar( 48, LighDur);

SampleSeqVar( 50, pulseDurationV);
SampleSeqVar( 51, pulseWaitV);
SampleSeqVar( 52, pulsePeriod);


End

'--------------------------------------------------------------------------------
' Conversion functions
'--------------------------------------------------------------------------------

' Angles in the range [-180,180] should span [-2147483648.0,2147483647.0]
Func Angle2Int32%( angle )
Return( angle * 2147483647.0 / 180 );
End

' Rates are calculated in degrees per sequencer step, with one degree being 11930465.
Func Hz2Int32%( hz )
' This assumes a sequencer rate of 1 kHz.
Return( hz * 11930465 * 360 / 1000 );
End

' Amplitudes must be converted such that [ 0, 32768 ] spans the positive range of the dac, e.g. [0, 5 ]
' We have to include the dac maximum and the degrees-per-second-to-voltage conversion factor. Does not include offset.
Func ChairAmp2Int16%( amp )
Return( amp * ChairDegreesPerSecond2Voltage * 32768 / MaxVoltage  ) ;
End

Func DrumAmp2Int16%( amp )
Return( amp * DrumDegreesPerSecond2Voltage * 32768 / MaxVoltage  )  ;
End

Func ChairAmp2Int32%( amp )
Return( amp * ChairDegreesPerSecond2Voltage * 2147483647 / MaxVoltage  ) ;
End

Func DrumAmp2Int32%( amp )
Return( amp * DrumDegreesPerSecond2Voltage * 2147483647 / MaxVoltage  )  ;
End


' Command velocities must be converted such that [ 0, 2147483647 ] spans the positive range of the dac, e.g. [0, 5 ]
' We have to include the dac maximum and the degrees-per-second-to-voltage conversion factor.
Func ChairVel2Int32%( amp )
Return(  (amp + ChairDegreesPerSecondOffset) * ChairDegreesPerSecond2Voltage* 2147483647 / MaxVoltage  );
End

Func DrumVel2Int32%( amp )
Return( (amp + DrumDegreesPerSecondOffset) * DrumDegreesPerSecond2Voltage * 2147483647 / MaxVoltage  );
End
